{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1583386959386},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1583386959366},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1583386959367},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1583386959386},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1583386959386},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1583386959386},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1583386959366},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1583386959384},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1583386959384},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1583386959384},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1583386959385},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1583386959385},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1583386959384},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1583386959385},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1583386959384},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1583386959386},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1583386959385},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1583386959386},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1583386959385},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1583386959368},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1583386959367},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1583386959367},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1583386959368},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1583386959367},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1583386959372},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1583386959368},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1583386959387},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1583386959371},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1583386959370},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1583386959370},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1583386959371},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1583386959371},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1583386959370},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1583386959370},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1583386959371},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1583386959370},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1583386959371},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1583386959371},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1583386959372},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1583386959372},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1583386959373},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1583386959373},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1583386959372},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1583386959383},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1583386959378},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1583386959381},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1583386959374},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1583386959375},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1583386959375},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1583386959374},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1583386959373},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1583386959374},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1583386959374},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1583386959373},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1583386959383},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1583386959374},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1583386959368},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1583386959369},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1583386959369},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1583386959369},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1583386959369},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1583386959369},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1583386959377},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1583386959377},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1583386959380},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1583386959379},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1583386959380},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1583386959379},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1583386959380},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1583386959379},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1583386959380},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1583386959380},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1583386959379},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1583386959379},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1583386959382},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1583386959383},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1583386959383},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1583386959375},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1583386959376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1583386959376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1583386959376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1583386959375},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1583386959376},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1583386959382},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1583386959381},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1583386959377},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1583387834750},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1583387834749},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1583387834749},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1583387834750},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1583387834750},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1583387834749},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1583387834750},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1583387834750},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1583387834750},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1583387834751},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1583387834751},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1583387834751},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1583387834752},{"_id":"themes/next/_config.yml","hash":"78b5261c3b9c02552201402c4edae9284ac24cc2","modified":1586749811846},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1583387834753},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1583387834775},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1583387834750},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1583387834749},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1583387834749},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1583387834750},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1583387834754},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1583387834753},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1583387834754},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1583387834754},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1583387834755},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1583387834756},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1583387834756},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1583387834756},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1583387834756},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1583387834756},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1583387834756},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1583387834757},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1583387834757},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1583387834757},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1583387834758},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1583387834757},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1583387834759},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1583387834774},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1583387834774},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1583387834774},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1583387834774},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1583387834774},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1583387834774},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1583387834774},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1583387834775},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1583387834775},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1583387834869},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1583387834869},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1583387834869},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583387834806},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1583387834758},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1583387834760},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1583387834758},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1583387834760},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1583387834760},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"2ce5e04f1fe867a5444eae0f474c1ffc005ba129","modified":1586750816523},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1583387834761},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1583387834762},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1583387834762},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1583387834764},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1583387834762},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1583387834763},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1583387834763},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"ff486613daddfc5a9b23aa1d633fce70bf146532","modified":1600474870861},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1583387834764},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1583387834765},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1583387834765},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1583387834766},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1583387834771},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1583387834772},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1583387834771},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1583387834772},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1583387834772},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1583387834772},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1583387834772},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1583387834776},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1583387834776},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1583387834776},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1583387834776},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1583387834777},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1583387834777},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1583387834776},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1583387834777},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1583387834777},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1583387834806},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1583387834807},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1583387834807},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1583387834808},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1583387834807},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1583387834807},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1583387834808},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1583387834808},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1583387834808},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1583387834809},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1583387834809},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1583387834810},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1583387834810},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1583387834811},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1583387834810},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1583387834811},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1583387834811},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1583387834811},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1583387834811},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583387834766},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583387834766},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583387834795},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583387834796},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583387834797},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583387834805},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583387834805},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1583387834763},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1583387834763},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1583387834764},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1583387834764},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1583387834764},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1583387834764},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1583387834765},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1583387834765},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1583387834765},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1583387834765},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1583387834766},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1583387834766},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1583387834768},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1583387834768},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1583387834768},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1583387834768},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1583387834768},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1583387834769},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1583387834768},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1583387834769},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1583387834769},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1583387834769},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1583387834769},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1583387834769},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1583387834769},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1583387834770},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1583387834770},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1583387834770},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1583387834770},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1583387834770},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1583387834770},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1583387834771},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1583387834770},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1583387834771},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1583387834773},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1583387834773},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1583387834774},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1583387834773},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1583387834794},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1583387834795},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1583387834796},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1583387834804},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1583387834796},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1583387834805},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1583387834805},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1583387834805},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1583387834812},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1583387834812},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1583387834812},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1583387834813},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1583387834813},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1583387834813},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1583387834813},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1583387834814},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1583387834815},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1583387834815},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1583387834816},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1583387834824},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1583387834829},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1583387834829},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1583387834829},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1583387834829},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1583387834835},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1583387834836},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1583387834836},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1583387834836},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1583387834838},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1583387834838},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1583387834837},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1583387834838},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1583387834838},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1583387834854},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1583387834853},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1583387834854},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1583387834855},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1583387834855},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1583387834855},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1583387834855},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1583387834856},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1583387834857},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1583387834856},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1583387834857},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1583387834857},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1583387834857},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1583387834858},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1583387834858},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1583387834858},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1583387834858},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1583387834859},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1583387834859},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1583387834858},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1583387834859},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1583387834859},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1583387834859},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1583387834860},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1583387834860},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1583387834861},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1583387834861},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1583387834865},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1583387834866},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1583387834868},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1583387834868},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1583387834868},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1583387834854},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1583387834773},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1583387834773},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1583387834778},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1583387834777},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1583387834778},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1583387834778},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1583387834778},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1583387834780},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1583387834788},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1583387834793},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1583387834794},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1583387834793},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1583387834793},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1583387834794},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1583387834793},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1583387834794},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1583387834797},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1583387834797},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1583387834798},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1583387834798},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1583387834798},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1583387834799},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1583387834799},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1583387834799},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1583387834800},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1583387834800},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1583387834801},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1583387834801},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1583387834801},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1583387834802},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1583387834803},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1583387834803},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1583387834803},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1583387834804},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1583387834804},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1583387834815},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1583387834823},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1583387834819},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1583387834822},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1583387834830},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1583387834830},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1583387834830},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1583387834830},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1583387834831},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1583387834834},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1583387834831},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1583387834834},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1583387834835},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1583387834837},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1583387834836},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1583387834840},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1583387834840},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1583387834840},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1583387834865},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1583387834865},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1583387834821},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583387834852},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583387834853},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1583387834867},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1583387834779},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1583387834778},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1583387834778},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1583387834779},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1583387834779},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1583387834779},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1583387834779},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1583387834780},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1583387834779},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1583387834780},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1583387834780},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1583387834780},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1583387834780},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1583387834780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1583387834785},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1583387834786},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1583387834786},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1583387834786},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1583387834787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1583387834786},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1583387834787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1583387834787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1583387834787},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1583387834787},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1583387834788},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1583387834789},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1583387834789},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1583387834790},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1583387834790},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1583387834790},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1583387834790},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1583387834790},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1583387834791},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1583387834782},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1583387834782},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1583387834782},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1583387834783},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1583387834783},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1583387834783},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1583387834783},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1583387834784},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1583387834783},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1583387834784},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1583387834784},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1583387834784},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1583387834784},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1583387834785},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1583387834785},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1583387834791},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1583387834791},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1583387834791},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1583387834792},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1583387834792},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1583387834792},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1583387834792},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1583387834792},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1583387834792},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1583387834793},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1583387834800},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1583387834800},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1583387834802},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1583387834817},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1583387834818},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1583387834818},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1583387834819},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1583387834818},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1583387834832},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1583387834833},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1583387834832},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1583387834832},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1583387834833},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1583387834832},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583387834845},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1583387834843},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1583387834851},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1583387834827},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1583387834864},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1583387834848},{"_id":"source/categories/index.md","hash":"e34691f402f6d99e697993f6de221f65465948d8","modified":1583390889815},{"_id":"source/tags/index.md","hash":"13b8f16aa7d04a6b787946e55593d9b53660ccf7","modified":1583388627432},{"_id":"public/categories/index.html","hash":"cbad8b669784fb1a64c58f905385f52bf914e589","modified":1584846205976},{"_id":"public/tags/index.html","hash":"2cdcf13a712f60228bf6c15ac41851bb30ba94a6","modified":1584846205976},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1584846205976},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1584846205976},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1584846205976},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1584846205976},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1584846205976},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1584846205976},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1584846205976},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1584846205976},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1584846205976},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1584846205976},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1584846205976},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1584846205976},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1584846205976},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1584846205976},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1584846205976},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1584846205976},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1584846205976},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1584846205976},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1584846205976},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1584846205976},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1584846205976},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584846205976},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584846205976},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1584846205976},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1584846205976},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1584846205976},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1584846205976},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1584846205976},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1584846205976},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1584846205976},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1584846205976},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1584846205976},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1584846205976},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1584846205976},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1584846205976},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1584846205976},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1584846205976},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1584846205976},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1584846205976},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1584846205976},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1584846205976},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1584846205976},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1584846205976},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1584846205976},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1584846205976},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1584846205976},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1584846205976},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1584846205976},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1584846205976},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1584846205976},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1584846205976},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1584846205976},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1584846205976},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1584846205976},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1584846205976},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1584846205976},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1584846205976},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1584846205976},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1584846205976},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1584846205976},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1584846205976},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1584846205976},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1584846205976},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1584846205976},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1584846205976},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1584846205976},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1584846205976},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1584846205976},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1584846205976},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1584846205976},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1584846205976},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1584846205976},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1584846205976},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1584846205976},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1584846205976},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1584846205976},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1584846205976},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1584846205976},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1584846205976},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1584846205976},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1584846205976},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1584846205976},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1584846205976},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1584846205976},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1584846205976},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1584846205976},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1584846205976},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1584846205976},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1584846205976},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1584846205976},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1584846205976},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1584846205976},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1584846205976},{"_id":"public/css/main.css","hash":"08644ea749968087650ea42c9dc3d893fb87fdd9","modified":1584846205976},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1584846205976},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1584846205976},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1584846205976},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1584846205976},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1584846205976},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1584846205976},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1584846205976},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1584846205976},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1584846205976},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1584846205976},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1584846205976},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1584846205976},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1584846205976},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1584846205976},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1584846205976},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1584846205976},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1584846205976},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1584846205976},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1584846205976},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1584846205976},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1584846205976},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1584846205976},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1584846205976},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1584846205976},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1584846205976},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1584846205976},{"_id":"source/_posts/java-agent.md","hash":"34877a024e6876156301c1eb4d5e3e4c934ea40a","modified":1591172483035},{"_id":"public/categories/Java/index.html","hash":"cf1205f31b45d661f88764e4d5e9c433e404c7bd","modified":1584846205976},{"_id":"public/archives/index.html","hash":"f9ddb7961ff9e8b8c93e90ba9e781c403a175baa","modified":1584846205976},{"_id":"public/archives/2020/index.html","hash":"cc6a9300570f01569d1e9444c1774bc7dbdfd0c8","modified":1584846205976},{"_id":"public/archives/2020/03/index.html","hash":"cf47a33f309ef1dfd094e8271f5e800d46f415e0","modified":1584846205976},{"_id":"public/tags/java-agent/index.html","hash":"d6f15fa533427d4a7484cbe7ea8ffc64d30c7d5b","modified":1584846205976},{"_id":"public/2020/03/05/java-agent/index.html","hash":"5c6c112d45898b6310c1dd466d42a36f68902e2e","modified":1584846205976},{"_id":"public/index.html","hash":"0e40076fff080f09c47e9860385ba8520b8f06fa","modified":1584846205976},{"_id":"source/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584859197420},{"_id":"source/_posts/mysql-locking-functions.md","hash":"723065e4e0e4fdcc8f0d2a0313f04304444804a0","modified":1587267052294},{"_id":"source/_posts/sshpass-usage.md","hash":"609adadc51bac5a4405e489247600514ea41546c","modified":1586667888699},{"_id":"source/_posts/commonly-used-git-command.md","hash":"14fcc68496c61447b96f043b9d43266be3f047f6","modified":1586667640694},{"_id":"source/_posts/travis-ci-host-key-verification-failed.md","hash":"1e88fdd2c5cbc2decc887111e0d9f9be054e37ad","modified":1604988132656},{"_id":"source/_posts/absolute-import-in-react-app.md","hash":"0ef7aa95d15d1eba29a28c47d3f2a256c0e64d28","modified":1591172483035},{"_id":"source/_posts/线程池学习笔记.md","hash":"9efa44111197ffccd64f52937f925def930fc22f","modified":1600395188958},{"_id":"source/_posts/jackson-serialize-enums.md","hash":"2499f5d5b2add5dc097daff511e8cfa5323cb2c8","modified":1586871468194},{"_id":"source/_posts/输出Mybatis的日志.md","hash":"95639f11967af221bbd2faa4e55fb9620c2ccb34","modified":1604988132656},{"_id":"source/_posts/how-to-cancel-request-in-axios.md","hash":"78f1c61b74c02055daef4dbced51f340bfee0113","modified":1587268014292},{"_id":"source/_posts/ReentrantLock源码分析.md","hash":"0af1da9851ea52a1b8ed6ae6000fe6dd08ea5712","modified":1590385204001},{"_id":"source/_posts/sed-guide.md","hash":"8f880e3aeafd5244d6d6c1faa1608829093f54b3","modified":1597545802728},{"_id":"source/_drafts/线程池学习笔记.md","hash":"128ffd147945c089da69b5ca61256de30a4c7ca4","modified":1604987371338},{"_id":"source/_posts/sshpass的使用方法.md","hash":"5ee2b2eaa56b0c9ccf7e20b7a4ecd7133621636e","modified":1604987496214},{"_id":"source/_posts/让React项目的import支持绝对路径.md","hash":"dbc305b8edd95b287e27c4ce78d5cce35776dadc","modified":1604988658746},{"_id":"source/_posts/开启Mybatis的日志.md","hash":"16e4db38e8f3a5c56ae1905610337f400f15e170","modified":1604988690976}],"Category":[{"name":"Java","_id":"ck7edxo420001iv2dcf3y9yft"},{"name":"Linux命令","_id":"ck8xxnjgb0002482d0ww53gf0"},{"name":"Git","_id":"ck8xxnjge0005482d6ato3bwd"},{"name":"常见问题","_id":"ck8xxnjgg0009482d2ov7b80n"},{"name":"MySQL","_id":"ck8xxojf0000g482da5w76krl"},{"name":"前端","_id":"ckf7lznoi0002ga2deuzxbuvx"},{"name":"Linux","_id":"ckf7lznq7000oga2d0938gbdv"}],"Data":[],"Page":[{"title":"分类","date":"2020-03-05T06:09:02.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-03-05 14:09:02\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-03-05T06:48:09.815Z","path":"categories/index.html","_id":"ck7ecobq40000ja2d7s8s0nsx","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-03-05T06:08:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-03-05 14:08:04\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-03-05T06:10:27.432Z","path":"tags/index.html","_id":"ck7ecobqa0001ja2d0svn8t8y","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java Agent快速入门","date":"2020-03-05T06:41:56.000Z","_content":"\n## 什么是Java Agent？\n\nAgent是一种从Java 6开始引入的机制。Agent以Jar包的形式存在，JVM在执行主程序的`main`方法之前会先调用Agent中的`premain`方法，这样一来，我们就有机会在主程序启动之前做其它的事情。\n\n<!--more-->\n\n## Agent有什么用？\n\nJava Agent主要的功能体现在“运行时”三个字上面，通过“运行时”可以使某些功能以“外挂”的方式提供：\n\n+ APM工具，例如SkyWalking和Zipkin这类性能监控平台会针对一些常用的框架（例如：JDBC、Spring Cloud和Dubbo）提供一个Agent（即一个jar包）用于实现非侵入式的性能指标收集，以及在服务间调用时自动传递traceId。\n+ 运行时增强，阿里开源的[transmittable-thread-local](https://github.com/alibaba/transmittable-thread-local)可以在运行时对[`InheritableThreadLocal`](https://docs.oracle.com/javase/10/docs/api/java/lang/InheritableThreadLocal.html)进行增强，使任务提交时ThreadLocal的值可以传递到任务执行时，用于解决ThreadLocal的值不能准确传递到线程池中的问题。\n+ 热加载，[Jrebel](https://zeroturnaround.com/software/jrebel/)可以实现类的热加载，甚至该工具还可以实现资源文件的热加载，例如，Mybatis的xml文件。\n+ 运行时Debug，[BTrace](https://github.com/btraceio/btrace)和阿里开源的[arthas](https://github.com/alibaba/arthas)可以对运行中的Java程序进行在线调试，用于追踪一些线下难以复现的问题。\n\n## 如何实现一个Agent？\n\n上文中提到Agent以Jar包的形式存在，JVM在运行主程序的`main`方法之前会先调用Agent的`premain`方法。因此一个Agent需要有一个`premain`方法。\n\n目前，JVM支持两种形式`premain`方法的定义，JVM首先尝试调用下面的`premain`方法：\n\n```java\npublic static void premain(String agentArgs, Instrumentation inst);\n```\n\n如果JVM没有找到上述方法，它就会调用下面这个`premain`方法：\n\n```java\npublic static void premain(String agentArgs);\n```\n\n下面我们来实现一个简单的Agent，它会在`premain`方法执行时输出：`I'm AgentDemo1`。\n\n先创建一个类存放`premain`方法：\n\n**AgentDemo1.java**\n\n```java\npackage cn.throwable;\n\npublic class AgentDemo1 {\n    public static void premain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1\");\n    }\n}\n```\n\n接下来需要在MANIFEST.MF文件中使用`Premain-Class`属性指定`premain`方法的所在类：\n\n**MANIFEST.MF**\n\n```text\nPremain-Class: cn.throwable.AgentDemo1\n```\n\n最后把上面的程序打包为AgetnDemo1.jar\n\n## Agent如何加载？\n\nAgent的加载方式有两种，一种方式是在主程序启动之前加载，另外一种方式是在主程序启动之后加载。\n\n为了方便后面的演示，我们先来准备一个Hello World程序，它被打包成为`HelloWorld.jar`。\n\n**HelloWorld.java**\n\n```java\npackage cn.throwable;\n\npublic class App \n{\n    public static void main( String[] args )\n    {\n        System.out.println( \"Hello World!\" );\n    }\n}\n```\n\n### 在主程序启动之前加载\n\n在主程序启动之前加载一个Agent非常简单，在启动主程序时指定参数`-javaagent`即可：\n\n```java\njava -javaagent:target/AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar\n```\n\n其中`target/AgentDemo1-1.0-SNAPSHOT.jar`是Agent的所在路径。\n\n**输出**\n\n```text\nI'm AgentDemo1\nHello World!\n```\n\n如果你看见的是下面的输出：\n\n```text\nI'm AgentDemo1\nno main manifest attribute, in HelloWorld.jar\n```\n\n说明我们在HelloWolrd.jar中没有指定`main`方法的位置，此时可以使用下面的命令指定`Agent`的位置与main方法的位置：\n\n```text\njava -javaagent:target/AgentDemo1-1.0-SNAPSHOT.jar -cp HelloWorld.jar cn.throwable.App\n```\n\n> PS：一般来说应该在HelloWorld.jar的MANIFEST.MF文件中使用属性Main-Class指定main方法的所在类。\n\n### 在主程序启动之后加载\n\n在主程序启动之后加载也称动态加载，这种加载方式可以把Agent挂载到正在运行的Java程序上，下面来看一下这种加载方式。\n\n我们需要稍微改造一下HelloWorld程序，不然它在输出`Hello, World!`之后便直接结束了导致我们没机会挂载Agent：\n\n**HelloWorld.java**\n\n```java\npackage cn.throwable;\n\npublic class App\n{\n    public static void main( String[] args ) throws InterruptedException {\n        System.out.println( \"Hello World!\" );\n        Thread.sleep(1000 * 60);\n    }\n}\n```\n\n现在该程序在输出`Hello, World!`之后会等待1分钟。\n\n还有，与第一种加载方式不同的是，使用动态加载时JVM会调用Agent的`agentmain`而不是`premain`方法，因此我们也需要修改一下我们的Agent：\n\n**AgentDemo1.java**\n\n```java\npackage cn.throwable;\n\npublic class AgentDemo1 {\n    public static void premain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1\");\n    }\n\n    public static void agentmain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1(Agentmain)\");\n    }\n}\n```\n\n如你所见，在上面的代码中同时存在`premain`和`agentmain`方法，这是允许的，因为在MANIFEST.MF文件中使用了两个不同的属性来指示两者的所在位置，其中`Premain-Class`属性表示`premain`方法的所在类，`Agent-Class`属性表示`agentmain`方法的所在类：\n\n**MANIFEST.MF**\n\n```text\nPremain-Class: cn.throwable.AgentDemo1\nAgent-Class: cn.throwable.AgentDemo1\n```\n\n此外，为了实现Agent的动态加载还需要编写一个程序来把Agent挂载到正在运行的Java程序之上：\n\n**Injector.java**\n\n```java\npackage cn.throwable;\n\nimport com.sun.tools.attach.AgentInitializationException;\nimport com.sun.tools.attach.AgentLoadException;\nimport com.sun.tools.attach.AttachNotSupportedException;\nimport com.sun.tools.attach.VirtualMachine;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Injector\n{\n    public static void main(String[] args ) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException {\n        // 目标程序的PID, 可通过jps命令查看\n        String jvmId = \"4315\";\n        VirtualMachine vm = VirtualMachine.attach(jvmId);\n        // Agent所在的位置\n        File agentFile = new File(\"AgentDemo1.jar\");\n        // 载入Agent\n        vm.loadAgent(agentFile.getAbsolutePath());\n        vm.detach();\n    }\n}\n```\n\n上面的代码中，变量`jvmId`存放的是目标程序的PID，该值可以使用`jps`命令查看。\n\n最后一步就是使用Injector把Agent挂载到运行中的HelloWorld程序上：\n\n+ 先运行HelloWorld程序。\n\n  ```text\n  java -jar target/HelloWorld.jar\n  ```\n\n+ 然后使用`jps`命令查看HelloWorld程序的PID。\n\n  ```text\n  18374 RemoteMavenServer36\n  19946 Launcher\n  19979 HelloWorld-1.0-SNAPSHOT.jar\n  20221 Jps\n  18126 \n  ```\n\n+ 由上可见HelloWorld程序的PID是19979，把这个值放入变量`jvmId`之中并运行Injector。\n\n**输出**\n\n```text\nHello World!\nI'm AgentDemo1(Agentmain)\n```\n\n最后需要注意的是，Java的[官方文档](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html)上特别指出：\n\n> Agent的Jar包是由`SystemClassLoader`进行加载的，而主程序的`main`方法所在类也是由`SystemClassLoader`加载的，这意味着Agent的`premain`方法与主程序的`main`方法使用相同的classloader加载规则与安全性设置。\n\n## Java Agent的异常处理策略\n\n#### 主程序启动之前加载的异常处理策略\n\n对于在主程序启动之前加载的Agent来说，如果在`premain`方法中产生异常则会导致主程序启动失败，下面我们演示一下该场景。\n\n首先，我们修改一下Agent的实现，在`premain`方法中抛出一个运行时异常：\n\n**AgentDemo1.java**\n\n```java\npackage cn.throwable;\n\npublic class AgentDemo1 {\n    public static void premain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1\");\n        throw new RuntimeException(\"abc\");\n    }\n}\n```\n\n然后加载该Agent：\n\n```text\njava -javaagent:target/AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar\n```\n\n**输出**\n\n```text\nI'm AgentDemo1\nException in thread \"main\" java.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:388)\n        at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401)\nCaused by: java.lang.RuntimeException: abc\n        at cn.throwable.AgentDemo1.premain(AgentDemo1.java:7)\n        ... 6 more\nFATAL ERROR in native method: processing of -javaagent failed\n[1]    19266 abort      java -javaagent:target/AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar\n```\n\n#### 主程序启动之后加载的异常处理策略\n\n对于动态加载的Agent来说，在`agentmain`方法中产生的异常是不会对正在运行的Java程序有任何影响的，下面我们来演示一下这种场景。\n\n与上面一样，我们先修改一下Agent的实现，在`agentmain`方法中抛出一个运行时异常：\n\n**AgentDemo1.java**\n\n```java\npackage cn.throwable;\n\npublic class AgentDemo1 {\n    public static void agentmain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1(Agentmain)\");\n        throw new RuntimeException(\"abc\");\n    }\n}\n```\n\n然后依次运行HelloWorld.jar与Injector程序，此时，虽然会抛出Agent启动失败的异常但是主程序的运行却不会受到影响。\n\n```text\nHello World!\nI'm AgentDemo1(Agentmain)\nException in thread \"Attach Listener\" java.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:388)\n        at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:411)\nCaused by: java.lang.RuntimeException: abc\n        at cn.throwable.AgentDemo1.agentmain(AgentDemo1.java:12)\n        ... 6 more\nAgent failed to start!\n```\n\n","source":"_posts/java-agent.md","raw":"---\ntitle: Java Agent快速入门\ndate: 2020-03-05 14:41:56\ntags:\n- java-agent\ncategories:\n- Java\n---\n\n## 什么是Java Agent？\n\nAgent是一种从Java 6开始引入的机制。Agent以Jar包的形式存在，JVM在执行主程序的`main`方法之前会先调用Agent中的`premain`方法，这样一来，我们就有机会在主程序启动之前做其它的事情。\n\n<!--more-->\n\n## Agent有什么用？\n\nJava Agent主要的功能体现在“运行时”三个字上面，通过“运行时”可以使某些功能以“外挂”的方式提供：\n\n+ APM工具，例如SkyWalking和Zipkin这类性能监控平台会针对一些常用的框架（例如：JDBC、Spring Cloud和Dubbo）提供一个Agent（即一个jar包）用于实现非侵入式的性能指标收集，以及在服务间调用时自动传递traceId。\n+ 运行时增强，阿里开源的[transmittable-thread-local](https://github.com/alibaba/transmittable-thread-local)可以在运行时对[`InheritableThreadLocal`](https://docs.oracle.com/javase/10/docs/api/java/lang/InheritableThreadLocal.html)进行增强，使任务提交时ThreadLocal的值可以传递到任务执行时，用于解决ThreadLocal的值不能准确传递到线程池中的问题。\n+ 热加载，[Jrebel](https://zeroturnaround.com/software/jrebel/)可以实现类的热加载，甚至该工具还可以实现资源文件的热加载，例如，Mybatis的xml文件。\n+ 运行时Debug，[BTrace](https://github.com/btraceio/btrace)和阿里开源的[arthas](https://github.com/alibaba/arthas)可以对运行中的Java程序进行在线调试，用于追踪一些线下难以复现的问题。\n\n## 如何实现一个Agent？\n\n上文中提到Agent以Jar包的形式存在，JVM在运行主程序的`main`方法之前会先调用Agent的`premain`方法。因此一个Agent需要有一个`premain`方法。\n\n目前，JVM支持两种形式`premain`方法的定义，JVM首先尝试调用下面的`premain`方法：\n\n```java\npublic static void premain(String agentArgs, Instrumentation inst);\n```\n\n如果JVM没有找到上述方法，它就会调用下面这个`premain`方法：\n\n```java\npublic static void premain(String agentArgs);\n```\n\n下面我们来实现一个简单的Agent，它会在`premain`方法执行时输出：`I'm AgentDemo1`。\n\n先创建一个类存放`premain`方法：\n\n**AgentDemo1.java**\n\n```java\npackage cn.throwable;\n\npublic class AgentDemo1 {\n    public static void premain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1\");\n    }\n}\n```\n\n接下来需要在MANIFEST.MF文件中使用`Premain-Class`属性指定`premain`方法的所在类：\n\n**MANIFEST.MF**\n\n```text\nPremain-Class: cn.throwable.AgentDemo1\n```\n\n最后把上面的程序打包为AgetnDemo1.jar\n\n## Agent如何加载？\n\nAgent的加载方式有两种，一种方式是在主程序启动之前加载，另外一种方式是在主程序启动之后加载。\n\n为了方便后面的演示，我们先来准备一个Hello World程序，它被打包成为`HelloWorld.jar`。\n\n**HelloWorld.java**\n\n```java\npackage cn.throwable;\n\npublic class App \n{\n    public static void main( String[] args )\n    {\n        System.out.println( \"Hello World!\" );\n    }\n}\n```\n\n### 在主程序启动之前加载\n\n在主程序启动之前加载一个Agent非常简单，在启动主程序时指定参数`-javaagent`即可：\n\n```java\njava -javaagent:target/AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar\n```\n\n其中`target/AgentDemo1-1.0-SNAPSHOT.jar`是Agent的所在路径。\n\n**输出**\n\n```text\nI'm AgentDemo1\nHello World!\n```\n\n如果你看见的是下面的输出：\n\n```text\nI'm AgentDemo1\nno main manifest attribute, in HelloWorld.jar\n```\n\n说明我们在HelloWolrd.jar中没有指定`main`方法的位置，此时可以使用下面的命令指定`Agent`的位置与main方法的位置：\n\n```text\njava -javaagent:target/AgentDemo1-1.0-SNAPSHOT.jar -cp HelloWorld.jar cn.throwable.App\n```\n\n> PS：一般来说应该在HelloWorld.jar的MANIFEST.MF文件中使用属性Main-Class指定main方法的所在类。\n\n### 在主程序启动之后加载\n\n在主程序启动之后加载也称动态加载，这种加载方式可以把Agent挂载到正在运行的Java程序上，下面来看一下这种加载方式。\n\n我们需要稍微改造一下HelloWorld程序，不然它在输出`Hello, World!`之后便直接结束了导致我们没机会挂载Agent：\n\n**HelloWorld.java**\n\n```java\npackage cn.throwable;\n\npublic class App\n{\n    public static void main( String[] args ) throws InterruptedException {\n        System.out.println( \"Hello World!\" );\n        Thread.sleep(1000 * 60);\n    }\n}\n```\n\n现在该程序在输出`Hello, World!`之后会等待1分钟。\n\n还有，与第一种加载方式不同的是，使用动态加载时JVM会调用Agent的`agentmain`而不是`premain`方法，因此我们也需要修改一下我们的Agent：\n\n**AgentDemo1.java**\n\n```java\npackage cn.throwable;\n\npublic class AgentDemo1 {\n    public static void premain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1\");\n    }\n\n    public static void agentmain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1(Agentmain)\");\n    }\n}\n```\n\n如你所见，在上面的代码中同时存在`premain`和`agentmain`方法，这是允许的，因为在MANIFEST.MF文件中使用了两个不同的属性来指示两者的所在位置，其中`Premain-Class`属性表示`premain`方法的所在类，`Agent-Class`属性表示`agentmain`方法的所在类：\n\n**MANIFEST.MF**\n\n```text\nPremain-Class: cn.throwable.AgentDemo1\nAgent-Class: cn.throwable.AgentDemo1\n```\n\n此外，为了实现Agent的动态加载还需要编写一个程序来把Agent挂载到正在运行的Java程序之上：\n\n**Injector.java**\n\n```java\npackage cn.throwable;\n\nimport com.sun.tools.attach.AgentInitializationException;\nimport com.sun.tools.attach.AgentLoadException;\nimport com.sun.tools.attach.AttachNotSupportedException;\nimport com.sun.tools.attach.VirtualMachine;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Injector\n{\n    public static void main(String[] args ) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException {\n        // 目标程序的PID, 可通过jps命令查看\n        String jvmId = \"4315\";\n        VirtualMachine vm = VirtualMachine.attach(jvmId);\n        // Agent所在的位置\n        File agentFile = new File(\"AgentDemo1.jar\");\n        // 载入Agent\n        vm.loadAgent(agentFile.getAbsolutePath());\n        vm.detach();\n    }\n}\n```\n\n上面的代码中，变量`jvmId`存放的是目标程序的PID，该值可以使用`jps`命令查看。\n\n最后一步就是使用Injector把Agent挂载到运行中的HelloWorld程序上：\n\n+ 先运行HelloWorld程序。\n\n  ```text\n  java -jar target/HelloWorld.jar\n  ```\n\n+ 然后使用`jps`命令查看HelloWorld程序的PID。\n\n  ```text\n  18374 RemoteMavenServer36\n  19946 Launcher\n  19979 HelloWorld-1.0-SNAPSHOT.jar\n  20221 Jps\n  18126 \n  ```\n\n+ 由上可见HelloWorld程序的PID是19979，把这个值放入变量`jvmId`之中并运行Injector。\n\n**输出**\n\n```text\nHello World!\nI'm AgentDemo1(Agentmain)\n```\n\n最后需要注意的是，Java的[官方文档](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html)上特别指出：\n\n> Agent的Jar包是由`SystemClassLoader`进行加载的，而主程序的`main`方法所在类也是由`SystemClassLoader`加载的，这意味着Agent的`premain`方法与主程序的`main`方法使用相同的classloader加载规则与安全性设置。\n\n## Java Agent的异常处理策略\n\n#### 主程序启动之前加载的异常处理策略\n\n对于在主程序启动之前加载的Agent来说，如果在`premain`方法中产生异常则会导致主程序启动失败，下面我们演示一下该场景。\n\n首先，我们修改一下Agent的实现，在`premain`方法中抛出一个运行时异常：\n\n**AgentDemo1.java**\n\n```java\npackage cn.throwable;\n\npublic class AgentDemo1 {\n    public static void premain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1\");\n        throw new RuntimeException(\"abc\");\n    }\n}\n```\n\n然后加载该Agent：\n\n```text\njava -javaagent:target/AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar\n```\n\n**输出**\n\n```text\nI'm AgentDemo1\nException in thread \"main\" java.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:388)\n        at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401)\nCaused by: java.lang.RuntimeException: abc\n        at cn.throwable.AgentDemo1.premain(AgentDemo1.java:7)\n        ... 6 more\nFATAL ERROR in native method: processing of -javaagent failed\n[1]    19266 abort      java -javaagent:target/AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar\n```\n\n#### 主程序启动之后加载的异常处理策略\n\n对于动态加载的Agent来说，在`agentmain`方法中产生的异常是不会对正在运行的Java程序有任何影响的，下面我们来演示一下这种场景。\n\n与上面一样，我们先修改一下Agent的实现，在`agentmain`方法中抛出一个运行时异常：\n\n**AgentDemo1.java**\n\n```java\npackage cn.throwable;\n\npublic class AgentDemo1 {\n    public static void agentmain(String agentArgs) {\n        System.out.println(\"I'm AgentDemo1(Agentmain)\");\n        throw new RuntimeException(\"abc\");\n    }\n}\n```\n\n然后依次运行HelloWorld.jar与Injector程序，此时，虽然会抛出Agent启动失败的异常但是主程序的运行却不会受到影响。\n\n```text\nHello World!\nI'm AgentDemo1(Agentmain)\nException in thread \"Attach Listener\" java.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:388)\n        at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:411)\nCaused by: java.lang.RuntimeException: abc\n        at cn.throwable.AgentDemo1.agentmain(AgentDemo1.java:12)\n        ... 6 more\nAgent failed to start!\n```\n\n","slug":"java-agent","published":1,"updated":"2020-06-03T08:21:23.035Z","_id":"ck7edxo3v0000iv2d4vmm25iy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是Java-Agent？\"><a href=\"#什么是Java-Agent？\" class=\"headerlink\" title=\"什么是Java Agent？\"></a>什么是Java Agent？</h2><p>Agent是一种从Java 6开始引入的机制。Agent以Jar包的形式存在，JVM在执行主程序的<code>main</code>方法之前会先调用Agent中的<code>premain</code>方法，这样一来，我们就有机会在主程序启动之前做其它的事情。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Agent有什么用？\"><a href=\"#Agent有什么用？\" class=\"headerlink\" title=\"Agent有什么用？\"></a>Agent有什么用？</h2><p>Java Agent主要的功能体现在“运行时”三个字上面，通过“运行时”可以使某些功能以“外挂”的方式提供：</p>\n<ul>\n<li>APM工具，例如SkyWalking和Zipkin这类性能监控平台会针对一些常用的框架（例如：JDBC、Spring Cloud和Dubbo）提供一个Agent（即一个jar包）用于实现非侵入式的性能指标收集，以及在服务间调用时自动传递traceId。</li>\n<li>运行时增强，阿里开源的<a href=\"https://github.com/alibaba/transmittable-thread-local\" target=\"_blank\" rel=\"noopener\">transmittable-thread-local</a>可以在运行时对<a href=\"https://docs.oracle.com/javase/10/docs/api/java/lang/InheritableThreadLocal.html\" target=\"_blank\" rel=\"noopener\"><code>InheritableThreadLocal</code></a>进行增强，使任务提交时ThreadLocal的值可以传递到任务执行时，用于解决ThreadLocal的值不能准确传递到线程池中的问题。</li>\n<li>热加载，<a href=\"https://zeroturnaround.com/software/jrebel/\" target=\"_blank\" rel=\"noopener\">Jrebel</a>可以实现类的热加载，甚至该工具还可以实现资源文件的热加载，例如，Mybatis的xml文件。</li>\n<li>运行时Debug，<a href=\"https://github.com/btraceio/btrace\" target=\"_blank\" rel=\"noopener\">BTrace</a>和阿里开源的<a href=\"https://github.com/alibaba/arthas\" target=\"_blank\" rel=\"noopener\">arthas</a>可以对运行中的Java程序进行在线调试，用于追踪一些线下难以复现的问题。</li>\n</ul>\n<h2 id=\"如何实现一个Agent？\"><a href=\"#如何实现一个Agent？\" class=\"headerlink\" title=\"如何实现一个Agent？\"></a>如何实现一个Agent？</h2><p>上文中提到Agent以Jar包的形式存在，JVM在运行主程序的<code>main</code>方法之前会先调用Agent的<code>premain</code>方法。因此一个Agent需要有一个<code>premain</code>方法。</p>\n<p>目前，JVM支持两种形式<code>premain</code>方法的定义，JVM首先尝试调用下面的<code>premain</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果JVM没有找到上述方法，它就会调用下面这个<code>premain</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>下面我们来实现一个简单的Agent，它会在<code>premain</code>方法执行时输出：<code>I&#39;m AgentDemo1</code>。</p>\n<p>先创建一个类存放<code>premain</code>方法：</p>\n<p><strong>AgentDemo1.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来需要在MANIFEST.MF文件中使用<code>Premain-Class</code>属性指定<code>premain</code>方法的所在类：</p>\n<p><strong>MANIFEST.MF</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Premain-Class: cn.throwable.AgentDemo1</span><br></pre></td></tr></table></figure>\n\n<p>最后把上面的程序打包为AgetnDemo1.jar</p>\n<h2 id=\"Agent如何加载？\"><a href=\"#Agent如何加载？\" class=\"headerlink\" title=\"Agent如何加载？\"></a>Agent如何加载？</h2><p>Agent的加载方式有两种，一种方式是在主程序启动之前加载，另外一种方式是在主程序启动之后加载。</p>\n<p>为了方便后面的演示，我们先来准备一个Hello World程序，它被打包成为<code>HelloWorld.jar</code>。</p>\n<p><strong>HelloWorld.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Hello World!\"</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在主程序启动之前加载\"><a href=\"#在主程序启动之前加载\" class=\"headerlink\" title=\"在主程序启动之前加载\"></a>在主程序启动之前加载</h3><p>在主程序启动之前加载一个Agent非常简单，在启动主程序时指定参数<code>-javaagent</code>即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:target/AgentDemo1-<span class=\"number\">1.0</span>-SNAPSHOT.jar -jar HelloWorld.jar</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>target/AgentDemo1-1.0-SNAPSHOT.jar</code>是Agent的所在路径。</p>\n<p><strong>输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&#39;m AgentDemo1</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<p>如果你看见的是下面的输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&#39;m AgentDemo1</span><br><span class=\"line\">no main manifest attribute, in HelloWorld.jar</span><br></pre></td></tr></table></figure>\n\n<p>说明我们在HelloWolrd.jar中没有指定<code>main</code>方法的位置，此时可以使用下面的命令指定<code>Agent</code>的位置与main方法的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:target&#x2F;AgentDemo1-1.0-SNAPSHOT.jar -cp HelloWorld.jar cn.throwable.App</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：一般来说应该在HelloWorld.jar的MANIFEST.MF文件中使用属性Main-Class指定main方法的所在类。</p>\n</blockquote>\n<h3 id=\"在主程序启动之后加载\"><a href=\"#在主程序启动之后加载\" class=\"headerlink\" title=\"在主程序启动之后加载\"></a>在主程序启动之后加载</h3><p>在主程序启动之后加载也称动态加载，这种加载方式可以把Agent挂载到正在运行的Java程序上，下面来看一下这种加载方式。</p>\n<p>我们需要稍微改造一下HelloWorld程序，不然它在输出<code>Hello, World!</code>之后便直接结束了导致我们没机会挂载Agent：</p>\n<p><strong>HelloWorld.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Hello World!\"</span> );</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在该程序在输出<code>Hello, World!</code>之后会等待1分钟。</p>\n<p>还有，与第一种加载方式不同的是，使用动态加载时JVM会调用Agent的<code>agentmain</code>而不是<code>premain</code>方法，因此我们也需要修改一下我们的Agent：</p>\n<p><strong>AgentDemo1.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1(Agentmain)\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如你所见，在上面的代码中同时存在<code>premain</code>和<code>agentmain</code>方法，这是允许的，因为在MANIFEST.MF文件中使用了两个不同的属性来指示两者的所在位置，其中<code>Premain-Class</code>属性表示<code>premain</code>方法的所在类，<code>Agent-Class</code>属性表示<code>agentmain</code>方法的所在类：</p>\n<p><strong>MANIFEST.MF</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Premain-Class: cn.throwable.AgentDemo1</span><br><span class=\"line\">Agent-Class: cn.throwable.AgentDemo1</span><br></pre></td></tr></table></figure>\n\n<p>此外，为了实现Agent的动态加载还需要编写一个程序来把Agent挂载到正在运行的Java程序之上：</p>\n<p><strong>Injector.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.AgentInitializationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.AgentLoadException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.AttachNotSupportedException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Injector</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args )</span> <span class=\"keyword\">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标程序的PID, 可通过jps命令查看</span></span><br><span class=\"line\">        String jvmId = <span class=\"string\">\"4315\"</span>;</span><br><span class=\"line\">        VirtualMachine vm = VirtualMachine.attach(jvmId);</span><br><span class=\"line\">        <span class=\"comment\">// Agent所在的位置</span></span><br><span class=\"line\">        File agentFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"AgentDemo1.jar\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 载入Agent</span></span><br><span class=\"line\">        vm.loadAgent(agentFile.getAbsolutePath());</span><br><span class=\"line\">        vm.detach();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，变量<code>jvmId</code>存放的是目标程序的PID，该值可以使用<code>jps</code>命令查看。</p>\n<p>最后一步就是使用Injector把Agent挂载到运行中的HelloWorld程序上：</p>\n<ul>\n<li><p>先运行HelloWorld程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar target&#x2F;HelloWorld.jar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后使用<code>jps</code>命令查看HelloWorld程序的PID。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18374 RemoteMavenServer36</span><br><span class=\"line\">19946 Launcher</span><br><span class=\"line\">19979 HelloWorld-1.0-SNAPSHOT.jar</span><br><span class=\"line\">20221 Jps</span><br><span class=\"line\">18126</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由上可见HelloWorld程序的PID是19979，把这个值放入变量<code>jvmId</code>之中并运行Injector。</p>\n</li>\n</ul>\n<p><strong>输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">I&#39;m AgentDemo1(Agentmain)</span><br></pre></td></tr></table></figure>\n\n<p>最后需要注意的是，Java的<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>上特别指出：</p>\n<blockquote>\n<p>Agent的Jar包是由<code>SystemClassLoader</code>进行加载的，而主程序的<code>main</code>方法所在类也是由<code>SystemClassLoader</code>加载的，这意味着Agent的<code>premain</code>方法与主程序的<code>main</code>方法使用相同的classloader加载规则与安全性设置。</p>\n</blockquote>\n<h2 id=\"Java-Agent的异常处理策略\"><a href=\"#Java-Agent的异常处理策略\" class=\"headerlink\" title=\"Java Agent的异常处理策略\"></a>Java Agent的异常处理策略</h2><h4 id=\"主程序启动之前加载的异常处理策略\"><a href=\"#主程序启动之前加载的异常处理策略\" class=\"headerlink\" title=\"主程序启动之前加载的异常处理策略\"></a>主程序启动之前加载的异常处理策略</h4><p>对于在主程序启动之前加载的Agent来说，如果在<code>premain</code>方法中产生异常则会导致主程序启动失败，下面我们演示一下该场景。</p>\n<p>首先，我们修改一下Agent的实现，在<code>premain</code>方法中抛出一个运行时异常：</p>\n<p><strong>AgentDemo1.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后加载该Agent：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:target&#x2F;AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&#39;m AgentDemo1</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">        at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:388)</span><br><span class=\"line\">        at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: abc</span><br><span class=\"line\">        at cn.throwable.AgentDemo1.premain(AgentDemo1.java:7)</span><br><span class=\"line\">        ... 6 more</span><br><span class=\"line\">FATAL ERROR in native method: processing of -javaagent failed</span><br><span class=\"line\">[1]    19266 abort      java -javaagent:target&#x2F;AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主程序启动之后加载的异常处理策略\"><a href=\"#主程序启动之后加载的异常处理策略\" class=\"headerlink\" title=\"主程序启动之后加载的异常处理策略\"></a>主程序启动之后加载的异常处理策略</h4><p>对于动态加载的Agent来说，在<code>agentmain</code>方法中产生的异常是不会对正在运行的Java程序有任何影响的，下面我们来演示一下这种场景。</p>\n<p>与上面一样，我们先修改一下Agent的实现，在<code>agentmain</code>方法中抛出一个运行时异常：</p>\n<p><strong>AgentDemo1.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1(Agentmain)\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后依次运行HelloWorld.jar与Injector程序，此时，虽然会抛出Agent启动失败的异常但是主程序的运行却不会受到影响。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">I&#39;m AgentDemo1(Agentmain)</span><br><span class=\"line\">Exception in thread &quot;Attach Listener&quot; java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">        at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:388)</span><br><span class=\"line\">        at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:411)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: abc</span><br><span class=\"line\">        at cn.throwable.AgentDemo1.agentmain(AgentDemo1.java:12)</span><br><span class=\"line\">        ... 6 more</span><br><span class=\"line\">Agent failed to start!</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是Java-Agent？\"><a href=\"#什么是Java-Agent？\" class=\"headerlink\" title=\"什么是Java Agent？\"></a>什么是Java Agent？</h2><p>Agent是一种从Java 6开始引入的机制。Agent以Jar包的形式存在，JVM在执行主程序的<code>main</code>方法之前会先调用Agent中的<code>premain</code>方法，这样一来，我们就有机会在主程序启动之前做其它的事情。</p>","more":"<h2 id=\"Agent有什么用？\"><a href=\"#Agent有什么用？\" class=\"headerlink\" title=\"Agent有什么用？\"></a>Agent有什么用？</h2><p>Java Agent主要的功能体现在“运行时”三个字上面，通过“运行时”可以使某些功能以“外挂”的方式提供：</p>\n<ul>\n<li>APM工具，例如SkyWalking和Zipkin这类性能监控平台会针对一些常用的框架（例如：JDBC、Spring Cloud和Dubbo）提供一个Agent（即一个jar包）用于实现非侵入式的性能指标收集，以及在服务间调用时自动传递traceId。</li>\n<li>运行时增强，阿里开源的<a href=\"https://github.com/alibaba/transmittable-thread-local\" target=\"_blank\" rel=\"noopener\">transmittable-thread-local</a>可以在运行时对<a href=\"https://docs.oracle.com/javase/10/docs/api/java/lang/InheritableThreadLocal.html\" target=\"_blank\" rel=\"noopener\"><code>InheritableThreadLocal</code></a>进行增强，使任务提交时ThreadLocal的值可以传递到任务执行时，用于解决ThreadLocal的值不能准确传递到线程池中的问题。</li>\n<li>热加载，<a href=\"https://zeroturnaround.com/software/jrebel/\" target=\"_blank\" rel=\"noopener\">Jrebel</a>可以实现类的热加载，甚至该工具还可以实现资源文件的热加载，例如，Mybatis的xml文件。</li>\n<li>运行时Debug，<a href=\"https://github.com/btraceio/btrace\" target=\"_blank\" rel=\"noopener\">BTrace</a>和阿里开源的<a href=\"https://github.com/alibaba/arthas\" target=\"_blank\" rel=\"noopener\">arthas</a>可以对运行中的Java程序进行在线调试，用于追踪一些线下难以复现的问题。</li>\n</ul>\n<h2 id=\"如何实现一个Agent？\"><a href=\"#如何实现一个Agent？\" class=\"headerlink\" title=\"如何实现一个Agent？\"></a>如何实现一个Agent？</h2><p>上文中提到Agent以Jar包的形式存在，JVM在运行主程序的<code>main</code>方法之前会先调用Agent的<code>premain</code>方法。因此一个Agent需要有一个<code>premain</code>方法。</p>\n<p>目前，JVM支持两种形式<code>premain</code>方法的定义，JVM首先尝试调用下面的<code>premain</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果JVM没有找到上述方法，它就会调用下面这个<code>premain</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>下面我们来实现一个简单的Agent，它会在<code>premain</code>方法执行时输出：<code>I&#39;m AgentDemo1</code>。</p>\n<p>先创建一个类存放<code>premain</code>方法：</p>\n<p><strong>AgentDemo1.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来需要在MANIFEST.MF文件中使用<code>Premain-Class</code>属性指定<code>premain</code>方法的所在类：</p>\n<p><strong>MANIFEST.MF</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Premain-Class: cn.throwable.AgentDemo1</span><br></pre></td></tr></table></figure>\n\n<p>最后把上面的程序打包为AgetnDemo1.jar</p>\n<h2 id=\"Agent如何加载？\"><a href=\"#Agent如何加载？\" class=\"headerlink\" title=\"Agent如何加载？\"></a>Agent如何加载？</h2><p>Agent的加载方式有两种，一种方式是在主程序启动之前加载，另外一种方式是在主程序启动之后加载。</p>\n<p>为了方便后面的演示，我们先来准备一个Hello World程序，它被打包成为<code>HelloWorld.jar</code>。</p>\n<p><strong>HelloWorld.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Hello World!\"</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在主程序启动之前加载\"><a href=\"#在主程序启动之前加载\" class=\"headerlink\" title=\"在主程序启动之前加载\"></a>在主程序启动之前加载</h3><p>在主程序启动之前加载一个Agent非常简单，在启动主程序时指定参数<code>-javaagent</code>即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:target/AgentDemo1-<span class=\"number\">1.0</span>-SNAPSHOT.jar -jar HelloWorld.jar</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>target/AgentDemo1-1.0-SNAPSHOT.jar</code>是Agent的所在路径。</p>\n<p><strong>输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&#39;m AgentDemo1</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<p>如果你看见的是下面的输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&#39;m AgentDemo1</span><br><span class=\"line\">no main manifest attribute, in HelloWorld.jar</span><br></pre></td></tr></table></figure>\n\n<p>说明我们在HelloWolrd.jar中没有指定<code>main</code>方法的位置，此时可以使用下面的命令指定<code>Agent</code>的位置与main方法的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:target&#x2F;AgentDemo1-1.0-SNAPSHOT.jar -cp HelloWorld.jar cn.throwable.App</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：一般来说应该在HelloWorld.jar的MANIFEST.MF文件中使用属性Main-Class指定main方法的所在类。</p>\n</blockquote>\n<h3 id=\"在主程序启动之后加载\"><a href=\"#在主程序启动之后加载\" class=\"headerlink\" title=\"在主程序启动之后加载\"></a>在主程序启动之后加载</h3><p>在主程序启动之后加载也称动态加载，这种加载方式可以把Agent挂载到正在运行的Java程序上，下面来看一下这种加载方式。</p>\n<p>我们需要稍微改造一下HelloWorld程序，不然它在输出<code>Hello, World!</code>之后便直接结束了导致我们没机会挂载Agent：</p>\n<p><strong>HelloWorld.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Hello World!\"</span> );</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在该程序在输出<code>Hello, World!</code>之后会等待1分钟。</p>\n<p>还有，与第一种加载方式不同的是，使用动态加载时JVM会调用Agent的<code>agentmain</code>而不是<code>premain</code>方法，因此我们也需要修改一下我们的Agent：</p>\n<p><strong>AgentDemo1.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1(Agentmain)\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如你所见，在上面的代码中同时存在<code>premain</code>和<code>agentmain</code>方法，这是允许的，因为在MANIFEST.MF文件中使用了两个不同的属性来指示两者的所在位置，其中<code>Premain-Class</code>属性表示<code>premain</code>方法的所在类，<code>Agent-Class</code>属性表示<code>agentmain</code>方法的所在类：</p>\n<p><strong>MANIFEST.MF</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Premain-Class: cn.throwable.AgentDemo1</span><br><span class=\"line\">Agent-Class: cn.throwable.AgentDemo1</span><br></pre></td></tr></table></figure>\n\n<p>此外，为了实现Agent的动态加载还需要编写一个程序来把Agent挂载到正在运行的Java程序之上：</p>\n<p><strong>Injector.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.AgentInitializationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.AgentLoadException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.AttachNotSupportedException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Injector</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args )</span> <span class=\"keyword\">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标程序的PID, 可通过jps命令查看</span></span><br><span class=\"line\">        String jvmId = <span class=\"string\">\"4315\"</span>;</span><br><span class=\"line\">        VirtualMachine vm = VirtualMachine.attach(jvmId);</span><br><span class=\"line\">        <span class=\"comment\">// Agent所在的位置</span></span><br><span class=\"line\">        File agentFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"AgentDemo1.jar\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 载入Agent</span></span><br><span class=\"line\">        vm.loadAgent(agentFile.getAbsolutePath());</span><br><span class=\"line\">        vm.detach();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，变量<code>jvmId</code>存放的是目标程序的PID，该值可以使用<code>jps</code>命令查看。</p>\n<p>最后一步就是使用Injector把Agent挂载到运行中的HelloWorld程序上：</p>\n<ul>\n<li><p>先运行HelloWorld程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar target&#x2F;HelloWorld.jar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后使用<code>jps</code>命令查看HelloWorld程序的PID。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18374 RemoteMavenServer36</span><br><span class=\"line\">19946 Launcher</span><br><span class=\"line\">19979 HelloWorld-1.0-SNAPSHOT.jar</span><br><span class=\"line\">20221 Jps</span><br><span class=\"line\">18126</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由上可见HelloWorld程序的PID是19979，把这个值放入变量<code>jvmId</code>之中并运行Injector。</p>\n</li>\n</ul>\n<p><strong>输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">I&#39;m AgentDemo1(Agentmain)</span><br></pre></td></tr></table></figure>\n\n<p>最后需要注意的是，Java的<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>上特别指出：</p>\n<blockquote>\n<p>Agent的Jar包是由<code>SystemClassLoader</code>进行加载的，而主程序的<code>main</code>方法所在类也是由<code>SystemClassLoader</code>加载的，这意味着Agent的<code>premain</code>方法与主程序的<code>main</code>方法使用相同的classloader加载规则与安全性设置。</p>\n</blockquote>\n<h2 id=\"Java-Agent的异常处理策略\"><a href=\"#Java-Agent的异常处理策略\" class=\"headerlink\" title=\"Java Agent的异常处理策略\"></a>Java Agent的异常处理策略</h2><h4 id=\"主程序启动之前加载的异常处理策略\"><a href=\"#主程序启动之前加载的异常处理策略\" class=\"headerlink\" title=\"主程序启动之前加载的异常处理策略\"></a>主程序启动之前加载的异常处理策略</h4><p>对于在主程序启动之前加载的Agent来说，如果在<code>premain</code>方法中产生异常则会导致主程序启动失败，下面我们演示一下该场景。</p>\n<p>首先，我们修改一下Agent的实现，在<code>premain</code>方法中抛出一个运行时异常：</p>\n<p><strong>AgentDemo1.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后加载该Agent：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:target&#x2F;AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&#39;m AgentDemo1</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">        at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:388)</span><br><span class=\"line\">        at sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:401)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: abc</span><br><span class=\"line\">        at cn.throwable.AgentDemo1.premain(AgentDemo1.java:7)</span><br><span class=\"line\">        ... 6 more</span><br><span class=\"line\">FATAL ERROR in native method: processing of -javaagent failed</span><br><span class=\"line\">[1]    19266 abort      java -javaagent:target&#x2F;AgentDemo1-1.0-SNAPSHOT.jar -jar HelloWorld.jar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主程序启动之后加载的异常处理策略\"><a href=\"#主程序启动之后加载的异常处理策略\" class=\"headerlink\" title=\"主程序启动之后加载的异常处理策略\"></a>主程序启动之后加载的异常处理策略</h4><p>对于动态加载的Agent来说，在<code>agentmain</code>方法中产生的异常是不会对正在运行的Java程序有任何影响的，下面我们来演示一下这种场景。</p>\n<p>与上面一样，我们先修改一下Agent的实现，在<code>agentmain</code>方法中抛出一个运行时异常：</p>\n<p><strong>AgentDemo1.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String agentArgs)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I'm AgentDemo1(Agentmain)\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后依次运行HelloWorld.jar与Injector程序，此时，虽然会抛出Agent启动失败的异常但是主程序的运行却不会受到影响。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">I&#39;m AgentDemo1(Agentmain)</span><br><span class=\"line\">Exception in thread &quot;Attach Listener&quot; java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">        at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:388)</span><br><span class=\"line\">        at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:411)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: abc</span><br><span class=\"line\">        at cn.throwable.AgentDemo1.agentmain(AgentDemo1.java:12)</span><br><span class=\"line\">        ... 6 more</span><br><span class=\"line\">Agent failed to start!</span><br></pre></td></tr></table></figure>"},{"title":"Git常用命令","date":"2020-04-12T02:39:56.000Z","_content":"\n## 删除远程仓库中的分支\n\n```java\ngit push origin -d gh-pages\n```\n\n+ -d是--delete的缩写\n+ gh-pages是被删除的远程分支\n+ origin是gh-pages分支所在的远程仓库\n\n## 克隆指定分支的最近N次提交记录\n\n```text\ngit clone --depth=1 --branch=master https://github.com/iochenlei/Throwable.git iochenlei/Throwable\n```\n\n+ --depth=1表示只克隆分支上最近的一次提交记录\n+ --branch=master指定要克隆的分支\n\n这样做的优点是可以大幅提升克隆的速度(对于大仓库也许可以提升CI的构建速度)，缺点是不能获得完整的仓库。\n\n","source":"_posts/commonly-used-git-command.md","raw":"---\ntitle: Git常用命令\ndate: 2020-04-12 10:39:56\ntags: git\ncategories: Git\n---\n\n## 删除远程仓库中的分支\n\n```java\ngit push origin -d gh-pages\n```\n\n+ -d是--delete的缩写\n+ gh-pages是被删除的远程分支\n+ origin是gh-pages分支所在的远程仓库\n\n## 克隆指定分支的最近N次提交记录\n\n```text\ngit clone --depth=1 --branch=master https://github.com/iochenlei/Throwable.git iochenlei/Throwable\n```\n\n+ --depth=1表示只克隆分支上最近的一次提交记录\n+ --branch=master指定要克隆的分支\n\n这样做的优点是可以大幅提升克隆的速度(对于大仓库也许可以提升CI的构建速度)，缺点是不能获得完整的仓库。\n\n","slug":"commonly-used-git-command","published":1,"updated":"2020-04-12T05:00:40.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8xxnjg80001482d1ujq576k","content":"<h2 id=\"删除远程仓库中的分支\"><a href=\"#删除远程仓库中的分支\" class=\"headerlink\" title=\"删除远程仓库中的分支\"></a>删除远程仓库中的分支</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -d gh-pages</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-d是–delete的缩写</li>\n<li>gh-pages是被删除的远程分支</li>\n<li>origin是gh-pages分支所在的远程仓库</li>\n</ul>\n<h2 id=\"克隆指定分支的最近N次提交记录\"><a href=\"#克隆指定分支的最近N次提交记录\" class=\"headerlink\" title=\"克隆指定分支的最近N次提交记录\"></a>克隆指定分支的最近N次提交记录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --depth&#x3D;1 --branch&#x3D;master https:&#x2F;&#x2F;github.com&#x2F;iochenlei&#x2F;Throwable.git iochenlei&#x2F;Throwable</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–depth=1表示只克隆分支上最近的一次提交记录</li>\n<li>–branch=master指定要克隆的分支</li>\n</ul>\n<p>这样做的优点是可以大幅提升克隆的速度(对于大仓库也许可以提升CI的构建速度)，缺点是不能获得完整的仓库。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"删除远程仓库中的分支\"><a href=\"#删除远程仓库中的分支\" class=\"headerlink\" title=\"删除远程仓库中的分支\"></a>删除远程仓库中的分支</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -d gh-pages</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-d是–delete的缩写</li>\n<li>gh-pages是被删除的远程分支</li>\n<li>origin是gh-pages分支所在的远程仓库</li>\n</ul>\n<h2 id=\"克隆指定分支的最近N次提交记录\"><a href=\"#克隆指定分支的最近N次提交记录\" class=\"headerlink\" title=\"克隆指定分支的最近N次提交记录\"></a>克隆指定分支的最近N次提交记录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --depth&#x3D;1 --branch&#x3D;master https:&#x2F;&#x2F;github.com&#x2F;iochenlei&#x2F;Throwable.git iochenlei&#x2F;Throwable</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–depth=1表示只克隆分支上最近的一次提交记录</li>\n<li>–branch=master指定要克隆的分支</li>\n</ul>\n<p>这样做的优点是可以大幅提升克隆的速度(对于大仓库也许可以提升CI的构建速度)，缺点是不能获得完整的仓库。</p>\n"},{"title":"Travis CI中报Host key verification failed的解决方法","date":"2020-04-12T01:52:55.000Z","_content":"\n最近，我在Travis CI中使用sshpass 与 rsync来部署静态网站的时候，发现下面这条命令会报错`Host key verification failed.`\n\n<!--more-->\n\n```text\nsshpass -e rsync -r --delete-after --quiet public myuser@18.163.206.00:~/throwable.cn\n```\n\n报错的原因分析如下：\n\n一般情况下在使用`ssh`命令连接服务器时，为了防止中间人攻击，在第一次连接上服务器时，会有个公钥确认阶段让你选yes或no。\n\n输入yes表示接受，并且把服务器对应的公钥保存到`~/.ssh/known_hosts`文件中，如果在后续使用`ssh`命令连接服务器时，发现服务器的公钥与`~/.ssh/known_hosts`中保存的不一致则会连接失败。\n\n输入no表示不接受，如下所示，如果我们选择no或者直接键入回车都会得到：`Host key verification failed.`\n\n```text\nThe authenticity of host 'myec2 (18.163.206.00)' can't be established.\nECDSA key fingerprint is SHA256:xxx47SDTj2IfL52BLVmYnFD1FwTc/HNdlh1712xxxx.\nAre you sure you want to continue connecting (yes/no)? no\nHost key verification failed.\n```\n\n所以导致报错的原因就是在CI环境中无法通过键盘或其它方式输入`yes`来确认接收服务器的公钥。\n\n尽管我已经使用了sshpass来完成自动输入密码的工作，但是sshpass目前不能完成服务器公钥确让这一步。\n\n经过一番Google之后，我在Travis CI的文档中找到了下面这个解决方法。\n\n如果假设我们服务器的地址是`git.example.com`，那么只需要在`.travis.yml`文件中添加下面这一节配置即可：\n\n```yml\naddons:\n  ssh_known_hosts: git.example.com\n```\n\n如果有多台服务器，那么还可以把该参数设为数组：\n\n```yml\naddons:\n  ssh_known_hosts:\n  - git.example.com\n  - 111.22.33.44\n```\n\n如果使用的不是22端口，还可以指定一个端口：\n\n```yml\naddons:\n  ssh_known_hosts: git.example.com:1234\n```\n\n","source":"_posts/travis-ci-host-key-verification-failed.md","raw":"---\ntitle: Travis CI中报Host key verification failed的解决方法\ndate: 2020-04-12 09:52:55\ntags: travis-ci\ncategories: 常见问题\n---\n\n最近，我在Travis CI中使用sshpass 与 rsync来部署静态网站的时候，发现下面这条命令会报错`Host key verification failed.`\n\n<!--more-->\n\n```text\nsshpass -e rsync -r --delete-after --quiet public myuser@18.163.206.00:~/throwable.cn\n```\n\n报错的原因分析如下：\n\n一般情况下在使用`ssh`命令连接服务器时，为了防止中间人攻击，在第一次连接上服务器时，会有个公钥确认阶段让你选yes或no。\n\n输入yes表示接受，并且把服务器对应的公钥保存到`~/.ssh/known_hosts`文件中，如果在后续使用`ssh`命令连接服务器时，发现服务器的公钥与`~/.ssh/known_hosts`中保存的不一致则会连接失败。\n\n输入no表示不接受，如下所示，如果我们选择no或者直接键入回车都会得到：`Host key verification failed.`\n\n```text\nThe authenticity of host 'myec2 (18.163.206.00)' can't be established.\nECDSA key fingerprint is SHA256:xxx47SDTj2IfL52BLVmYnFD1FwTc/HNdlh1712xxxx.\nAre you sure you want to continue connecting (yes/no)? no\nHost key verification failed.\n```\n\n所以导致报错的原因就是在CI环境中无法通过键盘或其它方式输入`yes`来确认接收服务器的公钥。\n\n尽管我已经使用了sshpass来完成自动输入密码的工作，但是sshpass目前不能完成服务器公钥确让这一步。\n\n经过一番Google之后，我在Travis CI的文档中找到了下面这个解决方法。\n\n如果假设我们服务器的地址是`git.example.com`，那么只需要在`.travis.yml`文件中添加下面这一节配置即可：\n\n```yml\naddons:\n  ssh_known_hosts: git.example.com\n```\n\n如果有多台服务器，那么还可以把该参数设为数组：\n\n```yml\naddons:\n  ssh_known_hosts:\n  - git.example.com\n  - 111.22.33.44\n```\n\n如果使用的不是22端口，还可以指定一个端口：\n\n```yml\naddons:\n  ssh_known_hosts: git.example.com:1234\n```\n\n","slug":"travis-ci-host-key-verification-failed","published":1,"updated":"2020-11-10T06:02:12.656Z","_id":"ck8xxnjgd0004482ddbg3e4qi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近，我在Travis CI中使用sshpass 与 rsync来部署静态网站的时候，发现下面这条命令会报错<code>Host key verification failed.</code></p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshpass -e rsync -r --delete-after --quiet public myuser@18.163.206.00:~&#x2F;throwable.cn</span><br></pre></td></tr></table></figure>\n\n<p>报错的原因分析如下：</p>\n<p>一般情况下在使用<code>ssh</code>命令连接服务器时，为了防止中间人攻击，在第一次连接上服务器时，会有个公钥确认阶段让你选yes或no。</p>\n<p>输入yes表示接受，并且把服务器对应的公钥保存到<code>~/.ssh/known_hosts</code>文件中，如果在后续使用<code>ssh</code>命令连接服务器时，发现服务器的公钥与<code>~/.ssh/known_hosts</code>中保存的不一致则会连接失败。</p>\n<p>输入no表示不接受，如下所示，如果我们选择no或者直接键入回车都会得到：<code>Host key verification failed.</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &#39;myec2 (18.163.206.00)&#39; can&#39;t be established.</span><br><span class=\"line\">ECDSA key fingerprint is SHA256:xxx47SDTj2IfL52BLVmYnFD1FwTc&#x2F;HNdlh1712xxxx.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes&#x2F;no)? no</span><br><span class=\"line\">Host key verification failed.</span><br></pre></td></tr></table></figure>\n\n<p>所以导致报错的原因就是在CI环境中无法通过键盘或其它方式输入<code>yes</code>来确认接收服务器的公钥。</p>\n<p>尽管我已经使用了sshpass来完成自动输入密码的工作，但是sshpass目前不能完成服务器公钥确让这一步。</p>\n<p>经过一番Google之后，我在Travis CI的文档中找到了下面这个解决方法。</p>\n<p>如果假设我们服务器的地址是<code>git.example.com</code>，那么只需要在<code>.travis.yml</code>文件中添加下面这一节配置即可：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">addons:</span></span><br><span class=\"line\">  <span class=\"attr\">ssh_known_hosts:</span> <span class=\"string\">git.example.com</span></span><br></pre></td></tr></table></figure>\n\n<p>如果有多台服务器，那么还可以把该参数设为数组：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">addons:</span></span><br><span class=\"line\">  <span class=\"attr\">ssh_known_hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git.example.com</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">111.22</span><span class=\"number\">.33</span><span class=\"number\">.44</span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用的不是22端口，还可以指定一个端口：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">addons:</span></span><br><span class=\"line\">  <span class=\"attr\">ssh_known_hosts:</span> <span class=\"string\">git.example.com:1234</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>最近，我在Travis CI中使用sshpass 与 rsync来部署静态网站的时候，发现下面这条命令会报错<code>Host key verification failed.</code></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshpass -e rsync -r --delete-after --quiet public myuser@18.163.206.00:~&#x2F;throwable.cn</span><br></pre></td></tr></table></figure>\n\n<p>报错的原因分析如下：</p>\n<p>一般情况下在使用<code>ssh</code>命令连接服务器时，为了防止中间人攻击，在第一次连接上服务器时，会有个公钥确认阶段让你选yes或no。</p>\n<p>输入yes表示接受，并且把服务器对应的公钥保存到<code>~/.ssh/known_hosts</code>文件中，如果在后续使用<code>ssh</code>命令连接服务器时，发现服务器的公钥与<code>~/.ssh/known_hosts</code>中保存的不一致则会连接失败。</p>\n<p>输入no表示不接受，如下所示，如果我们选择no或者直接键入回车都会得到：<code>Host key verification failed.</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &#39;myec2 (18.163.206.00)&#39; can&#39;t be established.</span><br><span class=\"line\">ECDSA key fingerprint is SHA256:xxx47SDTj2IfL52BLVmYnFD1FwTc&#x2F;HNdlh1712xxxx.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes&#x2F;no)? no</span><br><span class=\"line\">Host key verification failed.</span><br></pre></td></tr></table></figure>\n\n<p>所以导致报错的原因就是在CI环境中无法通过键盘或其它方式输入<code>yes</code>来确认接收服务器的公钥。</p>\n<p>尽管我已经使用了sshpass来完成自动输入密码的工作，但是sshpass目前不能完成服务器公钥确让这一步。</p>\n<p>经过一番Google之后，我在Travis CI的文档中找到了下面这个解决方法。</p>\n<p>如果假设我们服务器的地址是<code>git.example.com</code>，那么只需要在<code>.travis.yml</code>文件中添加下面这一节配置即可：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">addons:</span></span><br><span class=\"line\">  <span class=\"attr\">ssh_known_hosts:</span> <span class=\"string\">git.example.com</span></span><br></pre></td></tr></table></figure>\n\n<p>如果有多台服务器，那么还可以把该参数设为数组：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">addons:</span></span><br><span class=\"line\">  <span class=\"attr\">ssh_known_hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git.example.com</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">111.22</span><span class=\"number\">.33</span><span class=\"number\">.44</span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用的不是22端口，还可以指定一个端口：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">addons:</span></span><br><span class=\"line\">  <span class=\"attr\">ssh_known_hosts:</span> <span class=\"string\">git.example.com:1234</span></span><br></pre></td></tr></table></figure>"},{"title":"MySQL锁函数","date":"2020-04-13T02:39:05.000Z","_content":"\n## 函数说明\n\n| 名称                | 描述             |\n| ------------------- | ---------------- |\n| GET_LOCK()          | 获取指定名称的锁 |\n| IS_FREE_LOCK()      | 检测锁是否空闲   |\n| IS_USED_LOCK()      | 检测是否被占用   |\n| RELEASE_ALL_LOCKS() | 释放全部锁       |\n| RELEASE_LOCK()      | 释放指定名称的锁 |\n\n**GET_LOCK(str, timeout)**\n\n+ str，锁的名称，在MySQL 5.7或更高的版本中，它的长度是64个字符\n+ timeout，超时时间，单位秒，如果timeout是负数表示无限等待\n\n该函数获取到的锁是排它锁，同样名称的锁在同一时刻只能被一个Session所持有，如果其它的Session试图获取占用中的锁则会被阻塞。\n\n如果获取锁成功则返回1，如果获取锁超时则返回0，如果发生错误则返回NULL(例如运行内存不足或Session线程被Kill)。\n\n使用GET_LOCK()取到的锁需要显式调用RELEASE_LOCK()释放，或在Session终止时被隐式释放。而且在事务回滚或者提交时也不会释放GET_LOCK()取到的锁。\n\n此外，在一个Session中多次可以获取同样名称的锁，除非在该Session调用同样次数的RELEASE_LOCK()函数来释放掉所有获取到的锁，否则其它的Session不能获取到该名称的锁。\n\n当GET_LOCK()成功获取锁时，MySQL会在performance_schema数据库的`metadata_locks`表中注册一条与该锁对应的记录。`OBJECT_TYPE`列的值为`USER LEVEL LOCK`而`OBJECT_NAME`则是锁的名称。如果一个Session中多次获取了同样名称的锁，也只会有一条记录保存在`metadata_locks`表中。当该锁被释放时，`metadata_locks`中对应的记录也被删除。\n\n<!--more-->\n\n**IS_FREE_LOCK(str)**\n\n检测锁是否为空闲状态，返回1表示锁空闲，返回0表示锁已被占用，返回NULL表示发生错误。\n\n**IS_USED_LOCK(str)**\n\n检测锁是否为占用状态，如果锁已被占用则返回锁持有者的连接标识符，否则返回NULL。\n\n**RELEASE_ALL_LOCKS()**\n\n释放当前线程持有的全部锁，返回值是被释放的锁数量。\n\n**RELEASE_LOCK(str)**\n\n释放名称为str的锁，返回1表示锁释放成功，返回0表示锁的持有者不是当前Session，返回NULL表示名称为str的锁不存在。\n\n**注意：上面这些函数无法通过binlog复制到从机上。**\n\n## 使用方法\n\n### 获取锁\n\n```mysql\nselect GET_LOCK(\"lock1\", -1); -- 如果锁不可用，则无限等待下去\nselect GET_LOCK(\"lock2\", 20); -- 如果锁不可用，那么等待20秒之后返回0\n```\n\n### 释放锁\n\n```mysql\nselect RELEASE_LOCK(\"lock1\");\ndo RELEASE_LOCK(\"lock2\");\n```\n\n> select与do语句的区别在于：select有返回值且可以使用from分支语句，而do没有返回值且不能使用from分支语句。\n\n此外，在MySQL 5.7之前调用`GET_LOCK()`会释放已经存在的锁，考虑下面的例子：\n\n```mysql\nSELECT GET_LOCK('lock1',10); -- 获取lock1\nSELECT GET_LOCK('lock2',10); -- 在MySQL5.7之前此时释放掉已经持有的锁lock1\nSELECT RELEASE_LOCK('lock2'); -- lock2释放成功，返回0\nSELECT RELEASE_LOCK('lock1'); -- lock2在调用GET_LOCK('lock2',10)已经释放了，所有现在释放失败，返回NULL\n```\n\n如果在MySQL 5.7或者更高的版本中，则不存在上面的问题：\n\n```mysql\nSELECT GET_LOCK('lock1',10); -- 获取lock1\nSELECT GET_LOCK('lock2',10); -- 获取lock2\nSELECT RELEASE_LOCK('lock2'); -- lock2释放成功，返回0\nSELECT RELEASE_LOCK('lock1'); -- lock1释放成功，返回0\n```\n\n","source":"_posts/mysql-locking-functions.md","raw":"---\ntitle: MySQL锁函数\ndate: 2020-04-13 10:39:05\ntags:\n- 锁\ncategories:\n- MySQL\n---\n\n## 函数说明\n\n| 名称                | 描述             |\n| ------------------- | ---------------- |\n| GET_LOCK()          | 获取指定名称的锁 |\n| IS_FREE_LOCK()      | 检测锁是否空闲   |\n| IS_USED_LOCK()      | 检测是否被占用   |\n| RELEASE_ALL_LOCKS() | 释放全部锁       |\n| RELEASE_LOCK()      | 释放指定名称的锁 |\n\n**GET_LOCK(str, timeout)**\n\n+ str，锁的名称，在MySQL 5.7或更高的版本中，它的长度是64个字符\n+ timeout，超时时间，单位秒，如果timeout是负数表示无限等待\n\n该函数获取到的锁是排它锁，同样名称的锁在同一时刻只能被一个Session所持有，如果其它的Session试图获取占用中的锁则会被阻塞。\n\n如果获取锁成功则返回1，如果获取锁超时则返回0，如果发生错误则返回NULL(例如运行内存不足或Session线程被Kill)。\n\n使用GET_LOCK()取到的锁需要显式调用RELEASE_LOCK()释放，或在Session终止时被隐式释放。而且在事务回滚或者提交时也不会释放GET_LOCK()取到的锁。\n\n此外，在一个Session中多次可以获取同样名称的锁，除非在该Session调用同样次数的RELEASE_LOCK()函数来释放掉所有获取到的锁，否则其它的Session不能获取到该名称的锁。\n\n当GET_LOCK()成功获取锁时，MySQL会在performance_schema数据库的`metadata_locks`表中注册一条与该锁对应的记录。`OBJECT_TYPE`列的值为`USER LEVEL LOCK`而`OBJECT_NAME`则是锁的名称。如果一个Session中多次获取了同样名称的锁，也只会有一条记录保存在`metadata_locks`表中。当该锁被释放时，`metadata_locks`中对应的记录也被删除。\n\n<!--more-->\n\n**IS_FREE_LOCK(str)**\n\n检测锁是否为空闲状态，返回1表示锁空闲，返回0表示锁已被占用，返回NULL表示发生错误。\n\n**IS_USED_LOCK(str)**\n\n检测锁是否为占用状态，如果锁已被占用则返回锁持有者的连接标识符，否则返回NULL。\n\n**RELEASE_ALL_LOCKS()**\n\n释放当前线程持有的全部锁，返回值是被释放的锁数量。\n\n**RELEASE_LOCK(str)**\n\n释放名称为str的锁，返回1表示锁释放成功，返回0表示锁的持有者不是当前Session，返回NULL表示名称为str的锁不存在。\n\n**注意：上面这些函数无法通过binlog复制到从机上。**\n\n## 使用方法\n\n### 获取锁\n\n```mysql\nselect GET_LOCK(\"lock1\", -1); -- 如果锁不可用，则无限等待下去\nselect GET_LOCK(\"lock2\", 20); -- 如果锁不可用，那么等待20秒之后返回0\n```\n\n### 释放锁\n\n```mysql\nselect RELEASE_LOCK(\"lock1\");\ndo RELEASE_LOCK(\"lock2\");\n```\n\n> select与do语句的区别在于：select有返回值且可以使用from分支语句，而do没有返回值且不能使用from分支语句。\n\n此外，在MySQL 5.7之前调用`GET_LOCK()`会释放已经存在的锁，考虑下面的例子：\n\n```mysql\nSELECT GET_LOCK('lock1',10); -- 获取lock1\nSELECT GET_LOCK('lock2',10); -- 在MySQL5.7之前此时释放掉已经持有的锁lock1\nSELECT RELEASE_LOCK('lock2'); -- lock2释放成功，返回0\nSELECT RELEASE_LOCK('lock1'); -- lock2在调用GET_LOCK('lock2',10)已经释放了，所有现在释放失败，返回NULL\n```\n\n如果在MySQL 5.7或者更高的版本中，则不存在上面的问题：\n\n```mysql\nSELECT GET_LOCK('lock1',10); -- 获取lock1\nSELECT GET_LOCK('lock2',10); -- 获取lock2\nSELECT RELEASE_LOCK('lock2'); -- lock2释放成功，返回0\nSELECT RELEASE_LOCK('lock1'); -- lock1释放成功，返回0\n```\n\n","slug":"mysql-locking-functions","published":1,"updated":"2020-04-19T03:30:52.294Z","_id":"ck8xxojez000f482de9qod9sl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET_LOCK()</td>\n<td>获取指定名称的锁</td>\n</tr>\n<tr>\n<td>IS_FREE_LOCK()</td>\n<td>检测锁是否空闲</td>\n</tr>\n<tr>\n<td>IS_USED_LOCK()</td>\n<td>检测是否被占用</td>\n</tr>\n<tr>\n<td>RELEASE_ALL_LOCKS()</td>\n<td>释放全部锁</td>\n</tr>\n<tr>\n<td>RELEASE_LOCK()</td>\n<td>释放指定名称的锁</td>\n</tr>\n</tbody></table>\n<p><strong>GET_LOCK(str, timeout)</strong></p>\n<ul>\n<li>str，锁的名称，在MySQL 5.7或更高的版本中，它的长度是64个字符</li>\n<li>timeout，超时时间，单位秒，如果timeout是负数表示无限等待</li>\n</ul>\n<p>该函数获取到的锁是排它锁，同样名称的锁在同一时刻只能被一个Session所持有，如果其它的Session试图获取占用中的锁则会被阻塞。</p>\n<p>如果获取锁成功则返回1，如果获取锁超时则返回0，如果发生错误则返回NULL(例如运行内存不足或Session线程被Kill)。</p>\n<p>使用GET_LOCK()取到的锁需要显式调用RELEASE_LOCK()释放，或在Session终止时被隐式释放。而且在事务回滚或者提交时也不会释放GET_LOCK()取到的锁。</p>\n<p>此外，在一个Session中多次可以获取同样名称的锁，除非在该Session调用同样次数的RELEASE_LOCK()函数来释放掉所有获取到的锁，否则其它的Session不能获取到该名称的锁。</p>\n<p>当GET_LOCK()成功获取锁时，MySQL会在performance_schema数据库的<code>metadata_locks</code>表中注册一条与该锁对应的记录。<code>OBJECT_TYPE</code>列的值为<code>USER LEVEL LOCK</code>而<code>OBJECT_NAME</code>则是锁的名称。如果一个Session中多次获取了同样名称的锁，也只会有一条记录保存在<code>metadata_locks</code>表中。当该锁被释放时，<code>metadata_locks</code>中对应的记录也被删除。</p>\n<a id=\"more\"></a>\n\n<p><strong>IS_FREE_LOCK(str)</strong></p>\n<p>检测锁是否为空闲状态，返回1表示锁空闲，返回0表示锁已被占用，返回NULL表示发生错误。</p>\n<p><strong>IS_USED_LOCK(str)</strong></p>\n<p>检测锁是否为占用状态，如果锁已被占用则返回锁持有者的连接标识符，否则返回NULL。</p>\n<p><strong>RELEASE_ALL_LOCKS()</strong></p>\n<p>释放当前线程持有的全部锁，返回值是被释放的锁数量。</p>\n<p><strong>RELEASE_LOCK(str)</strong></p>\n<p>释放名称为str的锁，返回1表示锁释放成功，返回0表示锁的持有者不是当前Session，返回NULL表示名称为str的锁不存在。</p>\n<p><strong>注意：上面这些函数无法通过binlog复制到从机上。</strong></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"获取锁\"><a href=\"#获取锁\" class=\"headerlink\" title=\"获取锁\"></a>获取锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select GET_LOCK(&quot;lock1&quot;, -1); -- 如果锁不可用，则无限等待下去</span><br><span class=\"line\">select GET_LOCK(&quot;lock2&quot;, 20); -- 如果锁不可用，那么等待20秒之后返回0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"释放锁\"><a href=\"#释放锁\" class=\"headerlink\" title=\"释放锁\"></a>释放锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select RELEASE_LOCK(&quot;lock1&quot;);</span><br><span class=\"line\">do RELEASE_LOCK(&quot;lock2&quot;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>select与do语句的区别在于：select有返回值且可以使用from分支语句，而do没有返回值且不能使用from分支语句。</p>\n</blockquote>\n<p>此外，在MySQL 5.7之前调用<code>GET_LOCK()</code>会释放已经存在的锁，考虑下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT GET_LOCK(&#39;lock1&#39;,10); -- 获取lock1</span><br><span class=\"line\">SELECT GET_LOCK(&#39;lock2&#39;,10); -- 在MySQL5.7之前此时释放掉已经持有的锁lock1</span><br><span class=\"line\">SELECT RELEASE_LOCK(&#39;lock2&#39;); -- lock2释放成功，返回0</span><br><span class=\"line\">SELECT RELEASE_LOCK(&#39;lock1&#39;); -- lock2在调用GET_LOCK(&#39;lock2&#39;,10)已经释放了，所有现在释放失败，返回NULL</span><br></pre></td></tr></table></figure>\n\n<p>如果在MySQL 5.7或者更高的版本中，则不存在上面的问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT GET_LOCK(&#39;lock1&#39;,10); -- 获取lock1</span><br><span class=\"line\">SELECT GET_LOCK(&#39;lock2&#39;,10); -- 获取lock2</span><br><span class=\"line\">SELECT RELEASE_LOCK(&#39;lock2&#39;); -- lock2释放成功，返回0</span><br><span class=\"line\">SELECT RELEASE_LOCK(&#39;lock1&#39;); -- lock1释放成功，返回0</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET_LOCK()</td>\n<td>获取指定名称的锁</td>\n</tr>\n<tr>\n<td>IS_FREE_LOCK()</td>\n<td>检测锁是否空闲</td>\n</tr>\n<tr>\n<td>IS_USED_LOCK()</td>\n<td>检测是否被占用</td>\n</tr>\n<tr>\n<td>RELEASE_ALL_LOCKS()</td>\n<td>释放全部锁</td>\n</tr>\n<tr>\n<td>RELEASE_LOCK()</td>\n<td>释放指定名称的锁</td>\n</tr>\n</tbody></table>\n<p><strong>GET_LOCK(str, timeout)</strong></p>\n<ul>\n<li>str，锁的名称，在MySQL 5.7或更高的版本中，它的长度是64个字符</li>\n<li>timeout，超时时间，单位秒，如果timeout是负数表示无限等待</li>\n</ul>\n<p>该函数获取到的锁是排它锁，同样名称的锁在同一时刻只能被一个Session所持有，如果其它的Session试图获取占用中的锁则会被阻塞。</p>\n<p>如果获取锁成功则返回1，如果获取锁超时则返回0，如果发生错误则返回NULL(例如运行内存不足或Session线程被Kill)。</p>\n<p>使用GET_LOCK()取到的锁需要显式调用RELEASE_LOCK()释放，或在Session终止时被隐式释放。而且在事务回滚或者提交时也不会释放GET_LOCK()取到的锁。</p>\n<p>此外，在一个Session中多次可以获取同样名称的锁，除非在该Session调用同样次数的RELEASE_LOCK()函数来释放掉所有获取到的锁，否则其它的Session不能获取到该名称的锁。</p>\n<p>当GET_LOCK()成功获取锁时，MySQL会在performance_schema数据库的<code>metadata_locks</code>表中注册一条与该锁对应的记录。<code>OBJECT_TYPE</code>列的值为<code>USER LEVEL LOCK</code>而<code>OBJECT_NAME</code>则是锁的名称。如果一个Session中多次获取了同样名称的锁，也只会有一条记录保存在<code>metadata_locks</code>表中。当该锁被释放时，<code>metadata_locks</code>中对应的记录也被删除。</p>","more":"<p><strong>IS_FREE_LOCK(str)</strong></p>\n<p>检测锁是否为空闲状态，返回1表示锁空闲，返回0表示锁已被占用，返回NULL表示发生错误。</p>\n<p><strong>IS_USED_LOCK(str)</strong></p>\n<p>检测锁是否为占用状态，如果锁已被占用则返回锁持有者的连接标识符，否则返回NULL。</p>\n<p><strong>RELEASE_ALL_LOCKS()</strong></p>\n<p>释放当前线程持有的全部锁，返回值是被释放的锁数量。</p>\n<p><strong>RELEASE_LOCK(str)</strong></p>\n<p>释放名称为str的锁，返回1表示锁释放成功，返回0表示锁的持有者不是当前Session，返回NULL表示名称为str的锁不存在。</p>\n<p><strong>注意：上面这些函数无法通过binlog复制到从机上。</strong></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"获取锁\"><a href=\"#获取锁\" class=\"headerlink\" title=\"获取锁\"></a>获取锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select GET_LOCK(&quot;lock1&quot;, -1); -- 如果锁不可用，则无限等待下去</span><br><span class=\"line\">select GET_LOCK(&quot;lock2&quot;, 20); -- 如果锁不可用，那么等待20秒之后返回0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"释放锁\"><a href=\"#释放锁\" class=\"headerlink\" title=\"释放锁\"></a>释放锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select RELEASE_LOCK(&quot;lock1&quot;);</span><br><span class=\"line\">do RELEASE_LOCK(&quot;lock2&quot;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>select与do语句的区别在于：select有返回值且可以使用from分支语句，而do没有返回值且不能使用from分支语句。</p>\n</blockquote>\n<p>此外，在MySQL 5.7之前调用<code>GET_LOCK()</code>会释放已经存在的锁，考虑下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT GET_LOCK(&#39;lock1&#39;,10); -- 获取lock1</span><br><span class=\"line\">SELECT GET_LOCK(&#39;lock2&#39;,10); -- 在MySQL5.7之前此时释放掉已经持有的锁lock1</span><br><span class=\"line\">SELECT RELEASE_LOCK(&#39;lock2&#39;); -- lock2释放成功，返回0</span><br><span class=\"line\">SELECT RELEASE_LOCK(&#39;lock1&#39;); -- lock2在调用GET_LOCK(&#39;lock2&#39;,10)已经释放了，所有现在释放失败，返回NULL</span><br></pre></td></tr></table></figure>\n\n<p>如果在MySQL 5.7或者更高的版本中，则不存在上面的问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT GET_LOCK(&#39;lock1&#39;,10); -- 获取lock1</span><br><span class=\"line\">SELECT GET_LOCK(&#39;lock2&#39;,10); -- 获取lock2</span><br><span class=\"line\">SELECT RELEASE_LOCK(&#39;lock2&#39;); -- lock2释放成功，返回0</span><br><span class=\"line\">SELECT RELEASE_LOCK(&#39;lock1&#39;); -- lock1释放成功，返回0</span><br></pre></td></tr></table></figure>"},{"title":"【译】如何使用Jackson序列化与反序列化枚举类型","date":"2020-04-14T13:26:42.000Z","_content":"\n原文：[How To Serialize and Deserialize Enums with Jackson](https://www.baeldung.com/jackson-serialize-enums)\n\n## 1. 前言\n\n在本篇教程中我们将学习如何在Java中使用Jackson 2控制枚举类型的序列化与反序列化。\n\n## 2. 枚举类型转为JSON\n\n下面是我们定义的枚举类型：\n\n```java\npublic enum Distance {\n    KILOMETER(\"km\", 1000), \n    MILE(\"miles\", 1609.34),\n    METER(\"meters\", 1), \n    INCH(\"inches\", 0.0254),\n    CENTIMETER(\"cm\", 0.01), \n    MILLIMETER(\"mm\", 0.001);\n \n    private String unit;\n    private final double meters;\n \n    private Distance(String unit, double meters) {\n        this.unit = unit;\n        this.meters = meters;\n    }\n \n    // standard getters and setters\n}\n```\n\n### 2.1. 默认行为\n\n默认情况下，Jackson会把Java枚举类型转为String，例如：\n```java\nnew ObjectMapper().writeValueAsString(Distance.MILE);\n```\n\n将产生结果：\n\n```text\n\"MILE\"\n```\n\n然而，我们希望得到的结果如下：\n\n```json\n{\"unit\":\"miles\",\"meters\":1609.34}\n```\n\n<!--more-->\n### 2.2. 枚举类型转为JSON对象\n\n从Jackson 2.2.1开始，我们可以使用\t`@JsonFormat`配置转换的结果：\n\n```java\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\npublic enum Distance { ... }\n```\n\n此时，转换之后的结果是：\n\n```java\n{\"unit\":\"miles\",\"meters\":1609.34}\n```\n\n### 2.3. 枚举类型与@JsonValue\n\n另一个控制转换结果的简单的方法是在Getter函数上使用`@JsonValue`注解：\n\n```java\npublic enum Distance { \n    ...\n  \n    @JsonValue\n    public String getMeters() {\n        return meters;\n    }\n}\n```\n\n此时，`getMeters()`返回的值被用来表示该枚举类型，因此，转换之后的结果是：\n\n```java\n1609.34\n```\n\n### 2.4. 为枚举类型自定义Serializer\n\n在Jackson 2.1.2之前，我们可以使用一个自定义的Serializer来对枚举类型进行定制的序列化。\n\n首先我们需要定义Serializer:\n\n```java\npublic class DistanceSerializer extends StdSerializer {\n     \n    public DistanceSerializer() {\n        super(Distance.class);\n    }\n \n    public DistanceSerializer(Class t) {\n        super(t);\n    }\n \n    public void serialize(\n      Distance distance, JsonGenerator generator, SerializerProvider provider) \n      throws IOException, JsonProcessingException {\n        generator.writeStartObject();\n        generator.writeFieldName(\"name\");\n        generator.writeString(distance.name());\n        generator.writeFieldName(\"unit\");\n        generator.writeString(distance.getUnit());\n        generator.writeFieldName(\"meters\");\n        generator.writeNumber(distance.getMeters());\n        generator.writeEndObject();\n    }\n}\n```\n\n现在，我们把这个Serializer用于到枚举类型之上：\n\n```java\n@JsonSerialize(using = DistanceSerializer.class)\npublic enum TypeEnum { ... }\n```\n\n序列化之后的结果：\n\n```json\n{\"name\":\"MILE\",\"unit\":\"miles\",\"meters\":1609.34}\n```\n\n## 3. 反序列化JSON为Enum\n\n首先，我们来定义一个City类，该类有一个Distance成员：\n\n```java\n{\"name\":\"MILE\",\"unit\":\"miles\",\"meters\":1609.34}\n```\n\n下面，我们将讨论如何使用不同的方法来反序列一个JSON字符串为枚举类型。\n\n### 3.1. 默认行为\n\n**默认情况下，Jackson将根据枚举类型的名称反序列化枚举类型。**\n\n例如，下面这个JSON字符串：\n```json\n{\"distance\":\"KILOMETER\"}\n```\n\n能反序列化为`Distance.KILOMETER`对象：\n\n```java\nCity city = new ObjectMapper().readValue(json, City.class);\nassertEquals(Distance.KILOMETER, city.getDistance());\n```\n\n### 3.2. 使用@JsonValue\n\n我们已经学习了如何使用`@JsonValue`来序列化枚举类型，由于本例中枚举类型的值是常量，所以我们也可以使用同样的注解来反序列化。\n\n首先，我们在`getMeters()`方法上使用`@JsonValue`注解：\n\n```java\npublic enum Distance {\n    ...\n \n    @JsonValue\n    public double getMeters() {\n        return meters;\n    }\n}\n```\n\n现在，`getMeters()`方法的返回值可以用于表示一个枚举对象。因此，当反序列化下面这个JSON字符串：\n\n```json\n{\"distance\":\"0.0254\"}\n```\n\nJackson将查找`getMeters()`方法返回值为0.0254的枚举对象。在本例中，该对象是`Distance.INCH`:\n\n```java\nassertEquals(Distance.INCH, city.getDistance());\n```\n\n### 3.3. 使用@JsonProperty\n\n`@JsonProperty`注解可以用于一个枚举类型实例上：\n\n```java\npublic enum Distance {\n    @JsonProperty(\"distance-in-km\")\n    KILOMETER(\"km\", 1000), \n    @JsonProperty(\"distance-in-miles\")\n    MILE(\"miles\", 1609.34);\n  \n    ...\n}\n```\n\n通过使用该注解，**我们告知Jackson把@JsonProperty的值映射到带有该注解的对象上面去。**\n\n假设JSON字符串如下：\n```json\n{\"distance\": \"distance-in-km\"}\n```\n\n该字符串反序列化之后，会映射到`Distance.KILOMETER`对象：\n\n```java\nassertEquals(Distance.KILOMETER, city.getDistance());\n```\n\n### 3.4. 使用@JsonCreator\n\n**Jackson会调用被@JsonCreator注解的方法来构建对应的对象。*\n\n假设我们的JSON如下：\n\n```json\n{\n    \"distance\": {\n        \"unit\":\"miles\", \n        \"meters\":1609.34\n    }\n}\n```\n\n现在，我们来定义一个带有`@JsonCreator`注解的`forValues()`工厂方法：\n\n```java\npublic enum Distance {\n    \n    @JsonCreator\n    public static Distance forValues(@JsonProperty(\"unit\") String unit,\n      @JsonProperty(\"meters\") double meters) {\n        for (Distance distance : Distance.values()) {\n            if (\n              distance.unit.equals(unit) && Double.compare(distance.meters, meters) == 0) {\n                return distance;\n            }\n        }\n \n        return null;\n    }\n \n    ...\n}\n```\n\n注意，`@JsonProperty`注解会把输入的JSON字段绑定到方法参数上。\n\n然后，我们反序列化该JSON字符串会获得结果：\n\n```java\nassertEquals(Distance.MILE, city.getDistance());\n```\n\n### 3.5. 使用自定义的Deserializer\n\n在上面给出的方法都不能使用在，则可以使用自定义的Deserializer，例如，我们可能访问不到枚举类型的源码，或者我们可能使用的是旧版本的Jackson。\n\n根据我们以前的文章所述，首先，我们需要创建一个Deserializer类：\n\n```java\npublic class CustomEnumDeserializer extends StdDeserializer<Distance> {\n \n    @Override\n    public Distance deserialize(JsonParser jsonParser, DeserializationContext ctxt)\n      throws IOException, JsonProcessingException {\n        JsonNode node = jsonParser.getCodec().readTree(jsonParser);\n \n        String unit = node.get(\"unit\").asText();\n        double meters = node.get(\"meters\").asDouble();\n \n        for (Distance distance : Distance.values()) {\n            \n            if (distance.getUnit().equals(unit) && Double.compare(\n              distance.getMeters(), meters) == 0) {\n                return distance;\n            }\n        }\n \n        return null;\n    }\n}\n```\n\n然后，我们通过`@JsonDeserialize`注解使用这个Deserializer：\n\n```java\n@JsonDeserialize(using = CustomEnumDeserializer.class)\npublic enum Distance {\n   ...\n}\n```\n\n我们获得的结果是：\n\n```java\nassertEquals(Distance.MILE, city.getDistance());\n```\n\n## 4. 总结\n\n本文演示了如何使用更好的方法控制Java枚举类型的序列化与反序列化过程。\n\n所有的实例代码可以在[GitHub](https://github.com/eugenp/tutorials/tree/master/jackson-modules/jackson-conversions#readme \"GitHub\")找到。\n","source":"_posts/jackson-serialize-enums.md","raw":"---\ntitle: 【译】如何使用Jackson序列化与反序列化枚举类型\ndate: 2020-04-14 21:26:42\ntags:\n- jackson\n- 枚举\ncategories:\n- Java\n---\n\n原文：[How To Serialize and Deserialize Enums with Jackson](https://www.baeldung.com/jackson-serialize-enums)\n\n## 1. 前言\n\n在本篇教程中我们将学习如何在Java中使用Jackson 2控制枚举类型的序列化与反序列化。\n\n## 2. 枚举类型转为JSON\n\n下面是我们定义的枚举类型：\n\n```java\npublic enum Distance {\n    KILOMETER(\"km\", 1000), \n    MILE(\"miles\", 1609.34),\n    METER(\"meters\", 1), \n    INCH(\"inches\", 0.0254),\n    CENTIMETER(\"cm\", 0.01), \n    MILLIMETER(\"mm\", 0.001);\n \n    private String unit;\n    private final double meters;\n \n    private Distance(String unit, double meters) {\n        this.unit = unit;\n        this.meters = meters;\n    }\n \n    // standard getters and setters\n}\n```\n\n### 2.1. 默认行为\n\n默认情况下，Jackson会把Java枚举类型转为String，例如：\n```java\nnew ObjectMapper().writeValueAsString(Distance.MILE);\n```\n\n将产生结果：\n\n```text\n\"MILE\"\n```\n\n然而，我们希望得到的结果如下：\n\n```json\n{\"unit\":\"miles\",\"meters\":1609.34}\n```\n\n<!--more-->\n### 2.2. 枚举类型转为JSON对象\n\n从Jackson 2.2.1开始，我们可以使用\t`@JsonFormat`配置转换的结果：\n\n```java\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\npublic enum Distance { ... }\n```\n\n此时，转换之后的结果是：\n\n```java\n{\"unit\":\"miles\",\"meters\":1609.34}\n```\n\n### 2.3. 枚举类型与@JsonValue\n\n另一个控制转换结果的简单的方法是在Getter函数上使用`@JsonValue`注解：\n\n```java\npublic enum Distance { \n    ...\n  \n    @JsonValue\n    public String getMeters() {\n        return meters;\n    }\n}\n```\n\n此时，`getMeters()`返回的值被用来表示该枚举类型，因此，转换之后的结果是：\n\n```java\n1609.34\n```\n\n### 2.4. 为枚举类型自定义Serializer\n\n在Jackson 2.1.2之前，我们可以使用一个自定义的Serializer来对枚举类型进行定制的序列化。\n\n首先我们需要定义Serializer:\n\n```java\npublic class DistanceSerializer extends StdSerializer {\n     \n    public DistanceSerializer() {\n        super(Distance.class);\n    }\n \n    public DistanceSerializer(Class t) {\n        super(t);\n    }\n \n    public void serialize(\n      Distance distance, JsonGenerator generator, SerializerProvider provider) \n      throws IOException, JsonProcessingException {\n        generator.writeStartObject();\n        generator.writeFieldName(\"name\");\n        generator.writeString(distance.name());\n        generator.writeFieldName(\"unit\");\n        generator.writeString(distance.getUnit());\n        generator.writeFieldName(\"meters\");\n        generator.writeNumber(distance.getMeters());\n        generator.writeEndObject();\n    }\n}\n```\n\n现在，我们把这个Serializer用于到枚举类型之上：\n\n```java\n@JsonSerialize(using = DistanceSerializer.class)\npublic enum TypeEnum { ... }\n```\n\n序列化之后的结果：\n\n```json\n{\"name\":\"MILE\",\"unit\":\"miles\",\"meters\":1609.34}\n```\n\n## 3. 反序列化JSON为Enum\n\n首先，我们来定义一个City类，该类有一个Distance成员：\n\n```java\n{\"name\":\"MILE\",\"unit\":\"miles\",\"meters\":1609.34}\n```\n\n下面，我们将讨论如何使用不同的方法来反序列一个JSON字符串为枚举类型。\n\n### 3.1. 默认行为\n\n**默认情况下，Jackson将根据枚举类型的名称反序列化枚举类型。**\n\n例如，下面这个JSON字符串：\n```json\n{\"distance\":\"KILOMETER\"}\n```\n\n能反序列化为`Distance.KILOMETER`对象：\n\n```java\nCity city = new ObjectMapper().readValue(json, City.class);\nassertEquals(Distance.KILOMETER, city.getDistance());\n```\n\n### 3.2. 使用@JsonValue\n\n我们已经学习了如何使用`@JsonValue`来序列化枚举类型，由于本例中枚举类型的值是常量，所以我们也可以使用同样的注解来反序列化。\n\n首先，我们在`getMeters()`方法上使用`@JsonValue`注解：\n\n```java\npublic enum Distance {\n    ...\n \n    @JsonValue\n    public double getMeters() {\n        return meters;\n    }\n}\n```\n\n现在，`getMeters()`方法的返回值可以用于表示一个枚举对象。因此，当反序列化下面这个JSON字符串：\n\n```json\n{\"distance\":\"0.0254\"}\n```\n\nJackson将查找`getMeters()`方法返回值为0.0254的枚举对象。在本例中，该对象是`Distance.INCH`:\n\n```java\nassertEquals(Distance.INCH, city.getDistance());\n```\n\n### 3.3. 使用@JsonProperty\n\n`@JsonProperty`注解可以用于一个枚举类型实例上：\n\n```java\npublic enum Distance {\n    @JsonProperty(\"distance-in-km\")\n    KILOMETER(\"km\", 1000), \n    @JsonProperty(\"distance-in-miles\")\n    MILE(\"miles\", 1609.34);\n  \n    ...\n}\n```\n\n通过使用该注解，**我们告知Jackson把@JsonProperty的值映射到带有该注解的对象上面去。**\n\n假设JSON字符串如下：\n```json\n{\"distance\": \"distance-in-km\"}\n```\n\n该字符串反序列化之后，会映射到`Distance.KILOMETER`对象：\n\n```java\nassertEquals(Distance.KILOMETER, city.getDistance());\n```\n\n### 3.4. 使用@JsonCreator\n\n**Jackson会调用被@JsonCreator注解的方法来构建对应的对象。*\n\n假设我们的JSON如下：\n\n```json\n{\n    \"distance\": {\n        \"unit\":\"miles\", \n        \"meters\":1609.34\n    }\n}\n```\n\n现在，我们来定义一个带有`@JsonCreator`注解的`forValues()`工厂方法：\n\n```java\npublic enum Distance {\n    \n    @JsonCreator\n    public static Distance forValues(@JsonProperty(\"unit\") String unit,\n      @JsonProperty(\"meters\") double meters) {\n        for (Distance distance : Distance.values()) {\n            if (\n              distance.unit.equals(unit) && Double.compare(distance.meters, meters) == 0) {\n                return distance;\n            }\n        }\n \n        return null;\n    }\n \n    ...\n}\n```\n\n注意，`@JsonProperty`注解会把输入的JSON字段绑定到方法参数上。\n\n然后，我们反序列化该JSON字符串会获得结果：\n\n```java\nassertEquals(Distance.MILE, city.getDistance());\n```\n\n### 3.5. 使用自定义的Deserializer\n\n在上面给出的方法都不能使用在，则可以使用自定义的Deserializer，例如，我们可能访问不到枚举类型的源码，或者我们可能使用的是旧版本的Jackson。\n\n根据我们以前的文章所述，首先，我们需要创建一个Deserializer类：\n\n```java\npublic class CustomEnumDeserializer extends StdDeserializer<Distance> {\n \n    @Override\n    public Distance deserialize(JsonParser jsonParser, DeserializationContext ctxt)\n      throws IOException, JsonProcessingException {\n        JsonNode node = jsonParser.getCodec().readTree(jsonParser);\n \n        String unit = node.get(\"unit\").asText();\n        double meters = node.get(\"meters\").asDouble();\n \n        for (Distance distance : Distance.values()) {\n            \n            if (distance.getUnit().equals(unit) && Double.compare(\n              distance.getMeters(), meters) == 0) {\n                return distance;\n            }\n        }\n \n        return null;\n    }\n}\n```\n\n然后，我们通过`@JsonDeserialize`注解使用这个Deserializer：\n\n```java\n@JsonDeserialize(using = CustomEnumDeserializer.class)\npublic enum Distance {\n   ...\n}\n```\n\n我们获得的结果是：\n\n```java\nassertEquals(Distance.MILE, city.getDistance());\n```\n\n## 4. 总结\n\n本文演示了如何使用更好的方法控制Java枚举类型的序列化与反序列化过程。\n\n所有的实例代码可以在[GitHub](https://github.com/eugenp/tutorials/tree/master/jackson-modules/jackson-conversions#readme \"GitHub\")找到。\n","slug":"jackson-serialize-enums","published":1,"updated":"2020-04-14T13:37:48.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf7lznol0005ga2d2p8x6njm","content":"<p>原文：<a href=\"https://www.baeldung.com/jackson-serialize-enums\" target=\"_blank\" rel=\"noopener\">How To Serialize and Deserialize Enums with Jackson</a></p>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>在本篇教程中我们将学习如何在Java中使用Jackson 2控制枚举类型的序列化与反序列化。</p>\n<h2 id=\"2-枚举类型转为JSON\"><a href=\"#2-枚举类型转为JSON\" class=\"headerlink\" title=\"2. 枚举类型转为JSON\"></a>2. 枚举类型转为JSON</h2><p>下面是我们定义的枚举类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123;</span><br><span class=\"line\">    KILOMETER(<span class=\"string\">\"km\"</span>, <span class=\"number\">1000</span>), </span><br><span class=\"line\">    MILE(<span class=\"string\">\"miles\"</span>, <span class=\"number\">1609.34</span>),</span><br><span class=\"line\">    METER(<span class=\"string\">\"meters\"</span>, <span class=\"number\">1</span>), </span><br><span class=\"line\">    INCH(<span class=\"string\">\"inches\"</span>, <span class=\"number\">0.0254</span>),</span><br><span class=\"line\">    CENTIMETER(<span class=\"string\">\"cm\"</span>, <span class=\"number\">0.01</span>), </span><br><span class=\"line\">    MILLIMETER(<span class=\"string\">\"mm\"</span>, <span class=\"number\">0.001</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String unit;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> meters;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Distance</span><span class=\"params\">(String unit, <span class=\"keyword\">double</span> meters)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.unit = unit;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.meters = meters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// standard getters and setters</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-默认行为\"><a href=\"#2-1-默认行为\" class=\"headerlink\" title=\"2.1. 默认行为\"></a>2.1. 默认行为</h3><p>默认情况下，Jackson会把Java枚举类型转为String，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ObjectMapper().writeValueAsString(Distance.MILE);</span><br></pre></td></tr></table></figure>\n\n<p>将产生结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;MILE&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然而，我们希望得到的结果如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>,<span class=\"attr\">\"meters\"</span>:<span class=\"number\">1609.34</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h3 id=\"2-2-枚举类型转为JSON对象\"><a href=\"#2-2-枚举类型转为JSON对象\" class=\"headerlink\" title=\"2.2. 枚举类型转为JSON对象\"></a>2.2. 枚举类型转为JSON对象</h3><p>从Jackson 2.2.1开始，我们可以使用    <code>@JsonFormat</code>配置转换的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonFormat</span>(shape = JsonFormat.Shape.OBJECT)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，转换之后的结果是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>,<span class=\"string\">\"meters\"</span>:<span class=\"number\">1609.34</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-枚举类型与-JsonValue\"><a href=\"#2-3-枚举类型与-JsonValue\" class=\"headerlink\" title=\"2.3. 枚举类型与@JsonValue\"></a>2.3. 枚举类型与@JsonValue</h3><p>另一个控制转换结果的简单的方法是在Getter函数上使用<code>@JsonValue</code>注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@JsonValue</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMeters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> meters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，<code>getMeters()</code>返回的值被用来表示该枚举类型，因此，转换之后的结果是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1609.34</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-为枚举类型自定义Serializer\"><a href=\"#2-4-为枚举类型自定义Serializer\" class=\"headerlink\" title=\"2.4. 为枚举类型自定义Serializer\"></a>2.4. 为枚举类型自定义Serializer</h3><p>在Jackson 2.1.2之前，我们可以使用一个自定义的Serializer来对枚举类型进行定制的序列化。</p>\n<p>首先我们需要定义Serializer:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistanceSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">StdSerializer</span> </span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DistanceSerializer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Distance<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DistanceSerializer</span><span class=\"params\">(Class t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      Distance distance, JsonGenerator generator, SerializerProvider provider)</span> </span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class=\"line\">        generator.writeStartObject();</span><br><span class=\"line\">        generator.writeFieldName(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        generator.writeString(distance.name());</span><br><span class=\"line\">        generator.writeFieldName(<span class=\"string\">\"unit\"</span>);</span><br><span class=\"line\">        generator.writeString(distance.getUnit());</span><br><span class=\"line\">        generator.writeFieldName(<span class=\"string\">\"meters\"</span>);</span><br><span class=\"line\">        generator.writeNumber(distance.getMeters());</span><br><span class=\"line\">        generator.writeEndObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们把这个Serializer用于到枚举类型之上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonSerialize</span>(using = DistanceSerializer<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">enum</span> <span class=\"title\">TypeEnum</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>序列化之后的结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"MILE\"</span>,<span class=\"attr\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>,<span class=\"attr\">\"meters\"</span>:<span class=\"number\">1609.34</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-反序列化JSON为Enum\"><a href=\"#3-反序列化JSON为Enum\" class=\"headerlink\" title=\"3. 反序列化JSON为Enum\"></a>3. 反序列化JSON为Enum</h2><p>首先，我们来定义一个City类，该类有一个Distance成员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"MILE\"</span>,<span class=\"string\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>,<span class=\"string\">\"meters\"</span>:<span class=\"number\">1609.34</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面，我们将讨论如何使用不同的方法来反序列一个JSON字符串为枚举类型。</p>\n<h3 id=\"3-1-默认行为\"><a href=\"#3-1-默认行为\" class=\"headerlink\" title=\"3.1. 默认行为\"></a>3.1. 默认行为</h3><p><strong>默认情况下，Jackson将根据枚举类型的名称反序列化枚举类型。</strong></p>\n<p>例如，下面这个JSON字符串：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"distance\"</span>:<span class=\"string\">\"KILOMETER\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>能反序列化为<code>Distance.KILOMETER</code>对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">City city = <span class=\"keyword\">new</span> ObjectMapper().readValue(json, City<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">assertEquals(Distance.KILOMETER, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-使用-JsonValue\"><a href=\"#3-2-使用-JsonValue\" class=\"headerlink\" title=\"3.2. 使用@JsonValue\"></a>3.2. 使用@JsonValue</h3><p>我们已经学习了如何使用<code>@JsonValue</code>来序列化枚举类型，由于本例中枚举类型的值是常量，所以我们也可以使用同样的注解来反序列化。</p>\n<p>首先，我们在<code>getMeters()</code>方法上使用<code>@JsonValue</code>注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@JsonValue</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMeters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> meters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，<code>getMeters()</code>方法的返回值可以用于表示一个枚举对象。因此，当反序列化下面这个JSON字符串：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"distance\"</span>:<span class=\"string\">\"0.0254\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Jackson将查找<code>getMeters()</code>方法返回值为0.0254的枚举对象。在本例中，该对象是<code>Distance.INCH</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(Distance.INCH, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-使用-JsonProperty\"><a href=\"#3-3-使用-JsonProperty\" class=\"headerlink\" title=\"3.3. 使用@JsonProperty\"></a>3.3. 使用@JsonProperty</h3><p><code>@JsonProperty</code>注解可以用于一个枚举类型实例上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"distance-in-km\"</span>)</span><br><span class=\"line\">    KILOMETER(<span class=\"string\">\"km\"</span>, <span class=\"number\">1000</span>), </span><br><span class=\"line\">    <span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"distance-in-miles\"</span>)</span><br><span class=\"line\">    MILE(<span class=\"string\">\"miles\"</span>, <span class=\"number\">1609.34</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过使用该注解，<strong>我们告知Jackson把@JsonProperty的值映射到带有该注解的对象上面去。</strong></p>\n<p>假设JSON字符串如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"distance\"</span>: <span class=\"string\">\"distance-in-km\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该字符串反序列化之后，会映射到<code>Distance.KILOMETER</code>对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(Distance.KILOMETER, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-使用-JsonCreator\"><a href=\"#3-4-使用-JsonCreator\" class=\"headerlink\" title=\"3.4. 使用@JsonCreator\"></a>3.4. 使用@JsonCreator</h3><p><em>*Jackson会调用被@JsonCreator注解的方法来构建对应的对象。</em></p>\n<p>假设我们的JSON如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"distance\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"meters\"</span>:<span class=\"number\">1609.34</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们来定义一个带有<code>@JsonCreator</code>注解的<code>forValues()</code>工厂方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@JsonCreator</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Distance <span class=\"title\">forValues</span><span class=\"params\">(@JsonProperty(<span class=\"string\">\"unit\"</span>)</span> String unit,</span></span><br><span class=\"line\"><span class=\"function\">      @<span class=\"title\">JsonProperty</span><span class=\"params\">(<span class=\"string\">\"meters\"</span>)</span> <span class=\"keyword\">double</span> meters) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Distance distance : Distance.values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (</span><br><span class=\"line\">              distance.unit.equals(unit) &amp;&amp; Double.compare(distance.meters, meters) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> distance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，<code>@JsonProperty</code>注解会把输入的JSON字段绑定到方法参数上。</p>\n<p>然后，我们反序列化该JSON字符串会获得结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(Distance.MILE, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-使用自定义的Deserializer\"><a href=\"#3-5-使用自定义的Deserializer\" class=\"headerlink\" title=\"3.5. 使用自定义的Deserializer\"></a>3.5. 使用自定义的Deserializer</h3><p>在上面给出的方法都不能使用在，则可以使用自定义的Deserializer，例如，我们可能访问不到枚举类型的源码，或者我们可能使用的是旧版本的Jackson。</p>\n<p>根据我们以前的文章所述，首先，我们需要创建一个Deserializer类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomEnumDeserializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">StdDeserializer</span>&lt;<span class=\"title\">Distance</span>&gt; </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Distance <span class=\"title\">deserialize</span><span class=\"params\">(JsonParser jsonParser, DeserializationContext ctxt)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class=\"line\">        JsonNode node = jsonParser.getCodec().readTree(jsonParser);</span><br><span class=\"line\"> </span><br><span class=\"line\">        String unit = node.get(<span class=\"string\">\"unit\"</span>).asText();</span><br><span class=\"line\">        <span class=\"keyword\">double</span> meters = node.get(<span class=\"string\">\"meters\"</span>).asDouble();</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Distance distance : Distance.values()) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (distance.getUnit().equals(unit) &amp;&amp; Double.compare(</span><br><span class=\"line\">              distance.getMeters(), meters) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> distance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们通过<code>@JsonDeserialize</code>注解使用这个Deserializer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonDeserialize</span>(using = CustomEnumDeserializer<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">enum</span> <span class=\"title\">Distance</span> </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们获得的结果是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(Distance.MILE, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>本文演示了如何使用更好的方法控制Java枚举类型的序列化与反序列化过程。</p>\n<p>所有的实例代码可以在<a href=\"https://github.com/eugenp/tutorials/tree/master/jackson-modules/jackson-conversions#readme\" target=\"_blank\" rel=\"noopener\" title=\"GitHub\">GitHub</a>找到。</p>\n","site":{"data":{}},"excerpt":"<p>原文：<a href=\"https://www.baeldung.com/jackson-serialize-enums\" target=\"_blank\" rel=\"noopener\">How To Serialize and Deserialize Enums with Jackson</a></p>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>在本篇教程中我们将学习如何在Java中使用Jackson 2控制枚举类型的序列化与反序列化。</p>\n<h2 id=\"2-枚举类型转为JSON\"><a href=\"#2-枚举类型转为JSON\" class=\"headerlink\" title=\"2. 枚举类型转为JSON\"></a>2. 枚举类型转为JSON</h2><p>下面是我们定义的枚举类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123;</span><br><span class=\"line\">    KILOMETER(<span class=\"string\">\"km\"</span>, <span class=\"number\">1000</span>), </span><br><span class=\"line\">    MILE(<span class=\"string\">\"miles\"</span>, <span class=\"number\">1609.34</span>),</span><br><span class=\"line\">    METER(<span class=\"string\">\"meters\"</span>, <span class=\"number\">1</span>), </span><br><span class=\"line\">    INCH(<span class=\"string\">\"inches\"</span>, <span class=\"number\">0.0254</span>),</span><br><span class=\"line\">    CENTIMETER(<span class=\"string\">\"cm\"</span>, <span class=\"number\">0.01</span>), </span><br><span class=\"line\">    MILLIMETER(<span class=\"string\">\"mm\"</span>, <span class=\"number\">0.001</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String unit;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> meters;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Distance</span><span class=\"params\">(String unit, <span class=\"keyword\">double</span> meters)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.unit = unit;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.meters = meters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// standard getters and setters</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-默认行为\"><a href=\"#2-1-默认行为\" class=\"headerlink\" title=\"2.1. 默认行为\"></a>2.1. 默认行为</h3><p>默认情况下，Jackson会把Java枚举类型转为String，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ObjectMapper().writeValueAsString(Distance.MILE);</span><br></pre></td></tr></table></figure>\n\n<p>将产生结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;MILE&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然而，我们希望得到的结果如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>,<span class=\"attr\">\"meters\"</span>:<span class=\"number\">1609.34</span>&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2-2-枚举类型转为JSON对象\"><a href=\"#2-2-枚举类型转为JSON对象\" class=\"headerlink\" title=\"2.2. 枚举类型转为JSON对象\"></a>2.2. 枚举类型转为JSON对象</h3><p>从Jackson 2.2.1开始，我们可以使用    <code>@JsonFormat</code>配置转换的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonFormat</span>(shape = JsonFormat.Shape.OBJECT)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，转换之后的结果是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>,<span class=\"string\">\"meters\"</span>:<span class=\"number\">1609.34</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-枚举类型与-JsonValue\"><a href=\"#2-3-枚举类型与-JsonValue\" class=\"headerlink\" title=\"2.3. 枚举类型与@JsonValue\"></a>2.3. 枚举类型与@JsonValue</h3><p>另一个控制转换结果的简单的方法是在Getter函数上使用<code>@JsonValue</code>注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@JsonValue</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMeters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> meters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，<code>getMeters()</code>返回的值被用来表示该枚举类型，因此，转换之后的结果是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1609.34</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-为枚举类型自定义Serializer\"><a href=\"#2-4-为枚举类型自定义Serializer\" class=\"headerlink\" title=\"2.4. 为枚举类型自定义Serializer\"></a>2.4. 为枚举类型自定义Serializer</h3><p>在Jackson 2.1.2之前，我们可以使用一个自定义的Serializer来对枚举类型进行定制的序列化。</p>\n<p>首先我们需要定义Serializer:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistanceSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">StdSerializer</span> </span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DistanceSerializer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Distance<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DistanceSerializer</span><span class=\"params\">(Class t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      Distance distance, JsonGenerator generator, SerializerProvider provider)</span> </span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class=\"line\">        generator.writeStartObject();</span><br><span class=\"line\">        generator.writeFieldName(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        generator.writeString(distance.name());</span><br><span class=\"line\">        generator.writeFieldName(<span class=\"string\">\"unit\"</span>);</span><br><span class=\"line\">        generator.writeString(distance.getUnit());</span><br><span class=\"line\">        generator.writeFieldName(<span class=\"string\">\"meters\"</span>);</span><br><span class=\"line\">        generator.writeNumber(distance.getMeters());</span><br><span class=\"line\">        generator.writeEndObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们把这个Serializer用于到枚举类型之上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonSerialize</span>(using = DistanceSerializer<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">enum</span> <span class=\"title\">TypeEnum</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>序列化之后的结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"MILE\"</span>,<span class=\"attr\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>,<span class=\"attr\">\"meters\"</span>:<span class=\"number\">1609.34</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-反序列化JSON为Enum\"><a href=\"#3-反序列化JSON为Enum\" class=\"headerlink\" title=\"3. 反序列化JSON为Enum\"></a>3. 反序列化JSON为Enum</h2><p>首先，我们来定义一个City类，该类有一个Distance成员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"MILE\"</span>,<span class=\"string\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>,<span class=\"string\">\"meters\"</span>:<span class=\"number\">1609.34</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面，我们将讨论如何使用不同的方法来反序列一个JSON字符串为枚举类型。</p>\n<h3 id=\"3-1-默认行为\"><a href=\"#3-1-默认行为\" class=\"headerlink\" title=\"3.1. 默认行为\"></a>3.1. 默认行为</h3><p><strong>默认情况下，Jackson将根据枚举类型的名称反序列化枚举类型。</strong></p>\n<p>例如，下面这个JSON字符串：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"distance\"</span>:<span class=\"string\">\"KILOMETER\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>能反序列化为<code>Distance.KILOMETER</code>对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">City city = <span class=\"keyword\">new</span> ObjectMapper().readValue(json, City<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">assertEquals(Distance.KILOMETER, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-使用-JsonValue\"><a href=\"#3-2-使用-JsonValue\" class=\"headerlink\" title=\"3.2. 使用@JsonValue\"></a>3.2. 使用@JsonValue</h3><p>我们已经学习了如何使用<code>@JsonValue</code>来序列化枚举类型，由于本例中枚举类型的值是常量，所以我们也可以使用同样的注解来反序列化。</p>\n<p>首先，我们在<code>getMeters()</code>方法上使用<code>@JsonValue</code>注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@JsonValue</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMeters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> meters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，<code>getMeters()</code>方法的返回值可以用于表示一个枚举对象。因此，当反序列化下面这个JSON字符串：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"distance\"</span>:<span class=\"string\">\"0.0254\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Jackson将查找<code>getMeters()</code>方法返回值为0.0254的枚举对象。在本例中，该对象是<code>Distance.INCH</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(Distance.INCH, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-使用-JsonProperty\"><a href=\"#3-3-使用-JsonProperty\" class=\"headerlink\" title=\"3.3. 使用@JsonProperty\"></a>3.3. 使用@JsonProperty</h3><p><code>@JsonProperty</code>注解可以用于一个枚举类型实例上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"distance-in-km\"</span>)</span><br><span class=\"line\">    KILOMETER(<span class=\"string\">\"km\"</span>, <span class=\"number\">1000</span>), </span><br><span class=\"line\">    <span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"distance-in-miles\"</span>)</span><br><span class=\"line\">    MILE(<span class=\"string\">\"miles\"</span>, <span class=\"number\">1609.34</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过使用该注解，<strong>我们告知Jackson把@JsonProperty的值映射到带有该注解的对象上面去。</strong></p>\n<p>假设JSON字符串如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"distance\"</span>: <span class=\"string\">\"distance-in-km\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该字符串反序列化之后，会映射到<code>Distance.KILOMETER</code>对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(Distance.KILOMETER, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-使用-JsonCreator\"><a href=\"#3-4-使用-JsonCreator\" class=\"headerlink\" title=\"3.4. 使用@JsonCreator\"></a>3.4. 使用@JsonCreator</h3><p><em>*Jackson会调用被@JsonCreator注解的方法来构建对应的对象。</em></p>\n<p>假设我们的JSON如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"distance\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"unit\"</span>:<span class=\"string\">\"miles\"</span>, </span><br><span class=\"line\">        <span class=\"attr\">\"meters\"</span>:<span class=\"number\">1609.34</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们来定义一个带有<code>@JsonCreator</code>注解的<code>forValues()</code>工厂方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Distance &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@JsonCreator</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Distance <span class=\"title\">forValues</span><span class=\"params\">(@JsonProperty(<span class=\"string\">\"unit\"</span>)</span> String unit,</span></span><br><span class=\"line\"><span class=\"function\">      @<span class=\"title\">JsonProperty</span><span class=\"params\">(<span class=\"string\">\"meters\"</span>)</span> <span class=\"keyword\">double</span> meters) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Distance distance : Distance.values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (</span><br><span class=\"line\">              distance.unit.equals(unit) &amp;&amp; Double.compare(distance.meters, meters) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> distance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，<code>@JsonProperty</code>注解会把输入的JSON字段绑定到方法参数上。</p>\n<p>然后，我们反序列化该JSON字符串会获得结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(Distance.MILE, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-使用自定义的Deserializer\"><a href=\"#3-5-使用自定义的Deserializer\" class=\"headerlink\" title=\"3.5. 使用自定义的Deserializer\"></a>3.5. 使用自定义的Deserializer</h3><p>在上面给出的方法都不能使用在，则可以使用自定义的Deserializer，例如，我们可能访问不到枚举类型的源码，或者我们可能使用的是旧版本的Jackson。</p>\n<p>根据我们以前的文章所述，首先，我们需要创建一个Deserializer类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomEnumDeserializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">StdDeserializer</span>&lt;<span class=\"title\">Distance</span>&gt; </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Distance <span class=\"title\">deserialize</span><span class=\"params\">(JsonParser jsonParser, DeserializationContext ctxt)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class=\"line\">        JsonNode node = jsonParser.getCodec().readTree(jsonParser);</span><br><span class=\"line\"> </span><br><span class=\"line\">        String unit = node.get(<span class=\"string\">\"unit\"</span>).asText();</span><br><span class=\"line\">        <span class=\"keyword\">double</span> meters = node.get(<span class=\"string\">\"meters\"</span>).asDouble();</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Distance distance : Distance.values()) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (distance.getUnit().equals(unit) &amp;&amp; Double.compare(</span><br><span class=\"line\">              distance.getMeters(), meters) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> distance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们通过<code>@JsonDeserialize</code>注解使用这个Deserializer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonDeserialize</span>(using = CustomEnumDeserializer<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">enum</span> <span class=\"title\">Distance</span> </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们获得的结果是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(Distance.MILE, city.getDistance());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>本文演示了如何使用更好的方法控制Java枚举类型的序列化与反序列化过程。</p>\n<p>所有的实例代码可以在<a href=\"https://github.com/eugenp/tutorials/tree/master/jackson-modules/jackson-conversions#readme\" target=\"_blank\" rel=\"noopener\" title=\"GitHub\">GitHub</a>找到。</p>"},{"title":"如何在axios中取消请求","date":"2020-04-19T02:48:13.000Z","_content":"\n最近，需要实现这样一个需求，我在单页面应用中使用axios发送Long Polling请求对某业务的状态进行更新，请求的等待超时时间为30s，如果等待期间页面路由发生改变(即组件销毁)，此时则应该取消等待中的请求。一番搜索之后，我在axios的README中找到了下面这个解决办法：\n\n<!--more-->\n\naxios中基于[可取消的Promise提案](https://github.com/tc39/proposal-cancelable-promises)实现了cancel token接口，于是我们可以像下面这样使用`CancelToken.source()`来创建一个cancel token：\n\n```javascript\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  // 判断错误是不是由source.cancel操作引起的\n  if (axios.isCancel(thrown)) {\n    // thrown.message对应的是调用source.cancel()所传入的参数\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// 取消请求(cancel函数的参数是可选的)\nsource.cancel('Operation canceled by the user.');\n```\n\n还有一种方法是传递一个`executor`函数给`CancelToken`构造器：\n\n```javascript\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // executor会收到一个函数c作为参数传入，调用函数c即可取消请求\n    cancel = c; // 把函数c存入外部变量\n  })\n});\n\n// 取消请求\ncancel();\n```\n\n最后，axios的文档上还指出，多个请求可以共享同样的token。如此一来，调用一次`cancel()`就能同时取消多个请求。\n\n","source":"_posts/how-to-cancel-request-in-axios.md","raw":"---\ntitle: 如何在axios中取消请求\ndate: 2020-04-19 10:48:13\ntags:\n- axios\ncategories:\n- 前端\n---\n\n最近，需要实现这样一个需求，我在单页面应用中使用axios发送Long Polling请求对某业务的状态进行更新，请求的等待超时时间为30s，如果等待期间页面路由发生改变(即组件销毁)，此时则应该取消等待中的请求。一番搜索之后，我在axios的README中找到了下面这个解决办法：\n\n<!--more-->\n\naxios中基于[可取消的Promise提案](https://github.com/tc39/proposal-cancelable-promises)实现了cancel token接口，于是我们可以像下面这样使用`CancelToken.source()`来创建一个cancel token：\n\n```javascript\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  // 判断错误是不是由source.cancel操作引起的\n  if (axios.isCancel(thrown)) {\n    // thrown.message对应的是调用source.cancel()所传入的参数\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// 取消请求(cancel函数的参数是可选的)\nsource.cancel('Operation canceled by the user.');\n```\n\n还有一种方法是传递一个`executor`函数给`CancelToken`构造器：\n\n```javascript\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // executor会收到一个函数c作为参数传入，调用函数c即可取消请求\n    cancel = c; // 把函数c存入外部变量\n  })\n});\n\n// 取消请求\ncancel();\n```\n\n最后，axios的文档上还指出，多个请求可以共享同样的token。如此一来，调用一次`cancel()`就能同时取消多个请求。\n\n","slug":"how-to-cancel-request-in-axios","published":1,"updated":"2020-04-19T03:46:54.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf7lznq1000jga2dh3jp3ejj","content":"<p>最近，需要实现这样一个需求，我在单页面应用中使用axios发送Long Polling请求对某业务的状态进行更新，请求的等待超时时间为30s，如果等待期间页面路由发生改变(即组件销毁)，此时则应该取消等待中的请求。一番搜索之后，我在axios的README中找到了下面这个解决办法：</p>\n<a id=\"more\"></a>\n\n<p>axios中基于<a href=\"https://github.com/tc39/proposal-cancelable-promises\" target=\"_blank\" rel=\"noopener\">可取消的Promise提案</a>实现了cancel token接口，于是我们可以像下面这样使用<code>CancelToken.source()</code>来创建一个cancel token：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CancelToken = axios.CancelToken;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = CancelToken.source();</span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  cancelToken: source.token</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">thrown</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断错误是不是由source.cancel操作引起的</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// thrown.message对应的是调用source.cancel()所传入的参数</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request canceled'</span>, thrown.message);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">axios.post(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'new name'</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  cancelToken: source.token</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消请求(cancel函数的参数是可选的)</span></span><br><span class=\"line\">source.cancel(<span class=\"string\">'Operation canceled by the user.'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>还有一种方法是传递一个<code>executor</code>函数给<code>CancelToken</code>构造器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CancelToken = axios.CancelToken;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancel;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// executor会收到一个函数c作为参数传入，调用函数c即可取消请求</span></span><br><span class=\"line\">    cancel = c; <span class=\"comment\">// 把函数c存入外部变量</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消请求</span></span><br><span class=\"line\">cancel();</span><br></pre></td></tr></table></figure>\n\n<p>最后，axios的文档上还指出，多个请求可以共享同样的token。如此一来，调用一次<code>cancel()</code>就能同时取消多个请求。</p>\n","site":{"data":{}},"excerpt":"<p>最近，需要实现这样一个需求，我在单页面应用中使用axios发送Long Polling请求对某业务的状态进行更新，请求的等待超时时间为30s，如果等待期间页面路由发生改变(即组件销毁)，此时则应该取消等待中的请求。一番搜索之后，我在axios的README中找到了下面这个解决办法：</p>","more":"<p>axios中基于<a href=\"https://github.com/tc39/proposal-cancelable-promises\" target=\"_blank\" rel=\"noopener\">可取消的Promise提案</a>实现了cancel token接口，于是我们可以像下面这样使用<code>CancelToken.source()</code>来创建一个cancel token：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CancelToken = axios.CancelToken;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = CancelToken.source();</span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  cancelToken: source.token</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">thrown</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断错误是不是由source.cancel操作引起的</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// thrown.message对应的是调用source.cancel()所传入的参数</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request canceled'</span>, thrown.message);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">axios.post(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'new name'</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  cancelToken: source.token</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消请求(cancel函数的参数是可选的)</span></span><br><span class=\"line\">source.cancel(<span class=\"string\">'Operation canceled by the user.'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>还有一种方法是传递一个<code>executor</code>函数给<code>CancelToken</code>构造器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CancelToken = axios.CancelToken;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancel;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// executor会收到一个函数c作为参数传入，调用函数c即可取消请求</span></span><br><span class=\"line\">    cancel = c; <span class=\"comment\">// 把函数c存入外部变量</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消请求</span></span><br><span class=\"line\">cancel();</span><br></pre></td></tr></table></figure>\n\n<p>最后，axios的文档上还指出，多个请求可以共享同样的token。如此一来，调用一次<code>cancel()</code>就能同时取消多个请求。</p>"},{"title":"线程池学习笔记","date":"2020-09-18T02:12:24.000Z","_content":"\n## 线程池的创建方式\n\n一个方式是通过Executors工厂方法，常用的方法有以下几个：\n\n+ newFixedThreadPool()，创建线程数量固定的线程池；\n+ newSingleThreadExecutor()，创建只有一个线程的线程池；\n+ newCachedThreadPool()，创建一个可以自动扩展线程数量的线程池。\n\n另一个方式是通过new关键字创建ThreadPoolExecutor类的实例对象。\n\n## 线程池的核心参数\n\n\bThreadPoolExecutor的构造函数接受下面这些参数：\n\n+ corePoolSize，允许空闲的线程数量（如果allowCoreThreadTimeOut被设置，那么这部分线程也以被kill）；\n+ maximumPoolSize，允许的最大线程数量；\n+ keepAliveTime，当线程数量超过corePoolSize时，超过部分的线程存活时间；\n+ workQueue，用于暂存任务的队列。\n\n这些参数的取值范围如下：\n\n+ corePoolSize >= 0；\n+ keepAliveTime >= 0；\n+ maximumPoolSize > 0；\n+ maximumPoolSize > corePoolSize。\n\n### 参数详细介绍\n\n#### 核心与最大线程数量\n\n当通过`execute(Runnable)`方法提交任务时，如果正在运行的线程数量小于corePoolSize，则创建一个新的线程用于处理该请求（尽管此时可能存在空闲的worker线程）。\n\n如果此时正在运行的线程数量大于corePoolSize但是小于maximumPoolSize，这种情况下，只有在任务队列被填满时才会创建一个新的线程。\n\n通过把corePoolSize和maximumPoolSize设为相同的值，我们可以得到一个具有固定线程数量的线程池。\n\n#### 存活时间\n\n如果当前的线程数量已经超过corePoolSize，并且这部分的线程处于空闲状态的时间大于keepAliveTime所指定的时间之后就会结束。\n\n默认情况下keepAliveTime不对核心线程生效，但是我们可以通过`allowCoreThreadTimeOut(boolean)`方法让核心线程也具有存活时间。\n\n#### 线程的创建\n\n+ 如果正在运行的线程数量小于corePoolSize，则创建一个新的线程来运行任务；\n\n+ 如果正在运行的线程数量大于corePoolSize，则把任务放入队列；\n\n+ 如果任务不能放入队列，且正在运行的线程数量小于maximumPoolSize，则创建一个新的线程来运行任务。\n\n## 线程池的拒绝策略\n\n拒绝策略用于设置线程池在任务队列已满不能存放新的任务时应该进行的操作。所有的拒绝策略都是RejectedExecutionHandler接口的实现类。\n\n+ AbortPolicy，抛出RejectedExecutionException异常；\n+ DiscardPolicy，什么都不做；\n+ DiscardOldestPolicy，从任务队列中删除一个最旧的任务。\n\n## 线程池的任务提交流程\n\n## 线程池的使用注意事项\n\n","source":"_drafts/线程池学习笔记.md","raw":"---\ntitle: 线程池学习笔记\ndate: 2020-09-18 10:12:24\ntags: 多线程\ncategories: Java\n---\n\n## 线程池的创建方式\n\n一个方式是通过Executors工厂方法，常用的方法有以下几个：\n\n+ newFixedThreadPool()，创建线程数量固定的线程池；\n+ newSingleThreadExecutor()，创建只有一个线程的线程池；\n+ newCachedThreadPool()，创建一个可以自动扩展线程数量的线程池。\n\n另一个方式是通过new关键字创建ThreadPoolExecutor类的实例对象。\n\n## 线程池的核心参数\n\n\bThreadPoolExecutor的构造函数接受下面这些参数：\n\n+ corePoolSize，允许空闲的线程数量（如果allowCoreThreadTimeOut被设置，那么这部分线程也以被kill）；\n+ maximumPoolSize，允许的最大线程数量；\n+ keepAliveTime，当线程数量超过corePoolSize时，超过部分的线程存活时间；\n+ workQueue，用于暂存任务的队列。\n\n这些参数的取值范围如下：\n\n+ corePoolSize >= 0；\n+ keepAliveTime >= 0；\n+ maximumPoolSize > 0；\n+ maximumPoolSize > corePoolSize。\n\n### 参数详细介绍\n\n#### 核心与最大线程数量\n\n当通过`execute(Runnable)`方法提交任务时，如果正在运行的线程数量小于corePoolSize，则创建一个新的线程用于处理该请求（尽管此时可能存在空闲的worker线程）。\n\n如果此时正在运行的线程数量大于corePoolSize但是小于maximumPoolSize，这种情况下，只有在任务队列被填满时才会创建一个新的线程。\n\n通过把corePoolSize和maximumPoolSize设为相同的值，我们可以得到一个具有固定线程数量的线程池。\n\n#### 存活时间\n\n如果当前的线程数量已经超过corePoolSize，并且这部分的线程处于空闲状态的时间大于keepAliveTime所指定的时间之后就会结束。\n\n默认情况下keepAliveTime不对核心线程生效，但是我们可以通过`allowCoreThreadTimeOut(boolean)`方法让核心线程也具有存活时间。\n\n#### 线程的创建\n\n+ 如果正在运行的线程数量小于corePoolSize，则创建一个新的线程来运行任务；\n\n+ 如果正在运行的线程数量大于corePoolSize，则把任务放入队列；\n\n+ 如果任务不能放入队列，且正在运行的线程数量小于maximumPoolSize，则创建一个新的线程来运行任务。\n\n## 线程池的拒绝策略\n\n拒绝策略用于设置线程池在任务队列已满不能存放新的任务时应该进行的操作。所有的拒绝策略都是RejectedExecutionHandler接口的实现类。\n\n+ AbortPolicy，抛出RejectedExecutionException异常；\n+ DiscardPolicy，什么都不做；\n+ DiscardOldestPolicy，从任务队列中删除一个最旧的任务。\n\n## 线程池的任务提交流程\n\n## 线程池的使用注意事项\n\n","slug":"线程池学习笔记","published":0,"updated":"2020-11-10T06:25:14.507Z","_id":"ckhbk1tyk00001u2d6nz2b82s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"线程池的创建方式\"><a href=\"#线程池的创建方式\" class=\"headerlink\" title=\"线程池的创建方式\"></a>线程池的创建方式</h2><p>一个方式是通过Executors工厂方法，常用的方法有以下几个：</p>\n<ul>\n<li>newFixedThreadPool()，创建线程数量固定的线程池；</li>\n<li>newSingleThreadExecutor()，创建只有一个线程的线程池；</li>\n<li>newCachedThreadPool()，创建一个可以自动扩展线程数量的线程池。</li>\n</ul>\n<p>另一个方式是通过new关键字创建ThreadPoolExecutor类的实例对象。</p>\n<h2 id=\"线程池的核心参数\"><a href=\"#线程池的核心参数\" class=\"headerlink\" title=\"线程池的核心参数\"></a>线程池的核心参数</h2><p>\bThreadPoolExecutor的构造函数接受下面这些参数：</p>\n<ul>\n<li>corePoolSize，允许空闲的线程数量（如果allowCoreThreadTimeOut被设置，那么这部分线程也以被kill）；</li>\n<li>maximumPoolSize，允许的最大线程数量；</li>\n<li>keepAliveTime，当线程数量超过corePoolSize时，超过部分的线程存活时间；</li>\n<li>workQueue，用于暂存任务的队列。</li>\n</ul>\n<p>这些参数的取值范围如下：</p>\n<ul>\n<li>corePoolSize &gt;= 0；</li>\n<li>keepAliveTime &gt;= 0；</li>\n<li>maximumPoolSize &gt; 0；</li>\n<li>maximumPoolSize &gt; corePoolSize。</li>\n</ul>\n<h3 id=\"参数详细介绍\"><a href=\"#参数详细介绍\" class=\"headerlink\" title=\"参数详细介绍\"></a>参数详细介绍</h3><h4 id=\"核心与最大线程数量\"><a href=\"#核心与最大线程数量\" class=\"headerlink\" title=\"核心与最大线程数量\"></a>核心与最大线程数量</h4><p>当通过<code>execute(Runnable)</code>方法提交任务时，如果正在运行的线程数量小于corePoolSize，则创建一个新的线程用于处理该请求（尽管此时可能存在空闲的worker线程）。</p>\n<p>如果此时正在运行的线程数量大于corePoolSize但是小于maximumPoolSize，这种情况下，只有在任务队列被填满时才会创建一个新的线程。</p>\n<p>通过把corePoolSize和maximumPoolSize设为相同的值，我们可以得到一个具有固定线程数量的线程池。</p>\n<h4 id=\"存活时间\"><a href=\"#存活时间\" class=\"headerlink\" title=\"存活时间\"></a>存活时间</h4><p>如果当前的线程数量已经超过corePoolSize，并且这部分的线程处于空闲状态的时间大于keepAliveTime所指定的时间之后就会结束。</p>\n<p>默认情况下keepAliveTime不对核心线程生效，但是我们可以通过<code>allowCoreThreadTimeOut(boolean)</code>方法让核心线程也具有存活时间。</p>\n<h4 id=\"线程的创建\"><a href=\"#线程的创建\" class=\"headerlink\" title=\"线程的创建\"></a>线程的创建</h4><ul>\n<li><p>如果正在运行的线程数量小于corePoolSize，则创建一个新的线程来运行任务；</p>\n</li>\n<li><p>如果正在运行的线程数量大于corePoolSize，则把任务放入队列；</p>\n</li>\n<li><p>如果任务不能放入队列，且正在运行的线程数量小于maximumPoolSize，则创建一个新的线程来运行任务。</p>\n</li>\n</ul>\n<h2 id=\"线程池的拒绝策略\"><a href=\"#线程池的拒绝策略\" class=\"headerlink\" title=\"线程池的拒绝策略\"></a>线程池的拒绝策略</h2><p>拒绝策略用于设置线程池在任务队列已满不能存放新的任务时应该进行的操作。所有的拒绝策略都是RejectedExecutionHandler接口的实现类。</p>\n<ul>\n<li>AbortPolicy，抛出RejectedExecutionException异常；</li>\n<li>DiscardPolicy，什么都不做；</li>\n<li>DiscardOldestPolicy，从任务队列中删除一个最旧的任务。</li>\n</ul>\n<h2 id=\"线程池的任务提交流程\"><a href=\"#线程池的任务提交流程\" class=\"headerlink\" title=\"线程池的任务提交流程\"></a>线程池的任务提交流程</h2><h2 id=\"线程池的使用注意事项\"><a href=\"#线程池的使用注意事项\" class=\"headerlink\" title=\"线程池的使用注意事项\"></a>线程池的使用注意事项</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程池的创建方式\"><a href=\"#线程池的创建方式\" class=\"headerlink\" title=\"线程池的创建方式\"></a>线程池的创建方式</h2><p>一个方式是通过Executors工厂方法，常用的方法有以下几个：</p>\n<ul>\n<li>newFixedThreadPool()，创建线程数量固定的线程池；</li>\n<li>newSingleThreadExecutor()，创建只有一个线程的线程池；</li>\n<li>newCachedThreadPool()，创建一个可以自动扩展线程数量的线程池。</li>\n</ul>\n<p>另一个方式是通过new关键字创建ThreadPoolExecutor类的实例对象。</p>\n<h2 id=\"线程池的核心参数\"><a href=\"#线程池的核心参数\" class=\"headerlink\" title=\"线程池的核心参数\"></a>线程池的核心参数</h2><p>\bThreadPoolExecutor的构造函数接受下面这些参数：</p>\n<ul>\n<li>corePoolSize，允许空闲的线程数量（如果allowCoreThreadTimeOut被设置，那么这部分线程也以被kill）；</li>\n<li>maximumPoolSize，允许的最大线程数量；</li>\n<li>keepAliveTime，当线程数量超过corePoolSize时，超过部分的线程存活时间；</li>\n<li>workQueue，用于暂存任务的队列。</li>\n</ul>\n<p>这些参数的取值范围如下：</p>\n<ul>\n<li>corePoolSize &gt;= 0；</li>\n<li>keepAliveTime &gt;= 0；</li>\n<li>maximumPoolSize &gt; 0；</li>\n<li>maximumPoolSize &gt; corePoolSize。</li>\n</ul>\n<h3 id=\"参数详细介绍\"><a href=\"#参数详细介绍\" class=\"headerlink\" title=\"参数详细介绍\"></a>参数详细介绍</h3><h4 id=\"核心与最大线程数量\"><a href=\"#核心与最大线程数量\" class=\"headerlink\" title=\"核心与最大线程数量\"></a>核心与最大线程数量</h4><p>当通过<code>execute(Runnable)</code>方法提交任务时，如果正在运行的线程数量小于corePoolSize，则创建一个新的线程用于处理该请求（尽管此时可能存在空闲的worker线程）。</p>\n<p>如果此时正在运行的线程数量大于corePoolSize但是小于maximumPoolSize，这种情况下，只有在任务队列被填满时才会创建一个新的线程。</p>\n<p>通过把corePoolSize和maximumPoolSize设为相同的值，我们可以得到一个具有固定线程数量的线程池。</p>\n<h4 id=\"存活时间\"><a href=\"#存活时间\" class=\"headerlink\" title=\"存活时间\"></a>存活时间</h4><p>如果当前的线程数量已经超过corePoolSize，并且这部分的线程处于空闲状态的时间大于keepAliveTime所指定的时间之后就会结束。</p>\n<p>默认情况下keepAliveTime不对核心线程生效，但是我们可以通过<code>allowCoreThreadTimeOut(boolean)</code>方法让核心线程也具有存活时间。</p>\n<h4 id=\"线程的创建\"><a href=\"#线程的创建\" class=\"headerlink\" title=\"线程的创建\"></a>线程的创建</h4><ul>\n<li><p>如果正在运行的线程数量小于corePoolSize，则创建一个新的线程来运行任务；</p>\n</li>\n<li><p>如果正在运行的线程数量大于corePoolSize，则把任务放入队列；</p>\n</li>\n<li><p>如果任务不能放入队列，且正在运行的线程数量小于maximumPoolSize，则创建一个新的线程来运行任务。</p>\n</li>\n</ul>\n<h2 id=\"线程池的拒绝策略\"><a href=\"#线程池的拒绝策略\" class=\"headerlink\" title=\"线程池的拒绝策略\"></a>线程池的拒绝策略</h2><p>拒绝策略用于设置线程池在任务队列已满不能存放新的任务时应该进行的操作。所有的拒绝策略都是RejectedExecutionHandler接口的实现类。</p>\n<ul>\n<li>AbortPolicy，抛出RejectedExecutionException异常；</li>\n<li>DiscardPolicy，什么都不做；</li>\n<li>DiscardOldestPolicy，从任务队列中删除一个最旧的任务。</li>\n</ul>\n<h2 id=\"线程池的任务提交流程\"><a href=\"#线程池的任务提交流程\" class=\"headerlink\" title=\"线程池的任务提交流程\"></a>线程池的任务提交流程</h2><h2 id=\"线程池的使用注意事项\"><a href=\"#线程池的使用注意事项\" class=\"headerlink\" title=\"线程池的使用注意事项\"></a>线程池的使用注意事项</h2>"},{"title":"sshpass的使用方法","date":"2020-04-12T04:58:55.000Z","_content":"\nsshpass是一个命令行工具，用于在非交互式环境中（例如CI中）提供ssh的密码。\n\n该命令的语法如下：\n\n<!--more-->\n\n```text\nUsage: sshpass [-f|-d|-p|-e] [-hV] command parameters\n   -f filename   Take password to use from file\n   -d number     Use number as file descriptor for getting password\n   -p password   Provide password as argument (security unwise)\n   -e            Password is passed as env-var \"SSHPASS\"\n   With no parameters - password will be taken from stdin\n\n   -h            Show help (this screen)\n   -V            Print version information\nAt most one of -f, -d, -p or -e should be used\n```\n\n下面是两种常用提供密码的方式，如果一种都不指定，那么就从标准输入流中读取密码：\n\n-p，表示密码来自于命令行参数：\n\n```text\n$ sshpass -p '这里填密码' ssh username@10.42.0.1\n```\n\n-e，表示密码来自于环境变量：\n\n```text\n$ export SSHPASS='这里填密码'\n$ echo $SSHPASS\n$ sshpass -e ssh username@10.42.0.1\n```\n\n另外，sshpass不仅可以用于执行ssh命令，用于执行scp或者rsync命令也是可以的：\n\n```shell\n# 执行rsync命令\n$ sshpass -e rsync -r --delete-after --quiet public xxxx@18.163.206.60:~/throwable.cn\n# 执行scp命令\n$ sshpass -e scp -r public xxxx@18.163.206.60:~/throwable.cn\n```\n\n","source":"_posts/sshpass的使用方法.md","raw":"---\ntitle: sshpass的使用方法\ndate: 2020-04-12 12:58:55\ntags: sshpass\ncategories: Linux命令\n---\n\nsshpass是一个命令行工具，用于在非交互式环境中（例如CI中）提供ssh的密码。\n\n该命令的语法如下：\n\n<!--more-->\n\n```text\nUsage: sshpass [-f|-d|-p|-e] [-hV] command parameters\n   -f filename   Take password to use from file\n   -d number     Use number as file descriptor for getting password\n   -p password   Provide password as argument (security unwise)\n   -e            Password is passed as env-var \"SSHPASS\"\n   With no parameters - password will be taken from stdin\n\n   -h            Show help (this screen)\n   -V            Print version information\nAt most one of -f, -d, -p or -e should be used\n```\n\n下面是两种常用提供密码的方式，如果一种都不指定，那么就从标准输入流中读取密码：\n\n-p，表示密码来自于命令行参数：\n\n```text\n$ sshpass -p '这里填密码' ssh username@10.42.0.1\n```\n\n-e，表示密码来自于环境变量：\n\n```text\n$ export SSHPASS='这里填密码'\n$ echo $SSHPASS\n$ sshpass -e ssh username@10.42.0.1\n```\n\n另外，sshpass不仅可以用于执行ssh命令，用于执行scp或者rsync命令也是可以的：\n\n```shell\n# 执行rsync命令\n$ sshpass -e rsync -r --delete-after --quiet public xxxx@18.163.206.60:~/throwable.cn\n# 执行scp命令\n$ sshpass -e scp -r public xxxx@18.163.206.60:~/throwable.cn\n```\n\n","slug":"sshpass的使用方法","published":1,"updated":"2020-11-10T05:51:36.214Z","_id":"ckhbk2hft00031u2d6ej4fbo5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>sshpass是一个命令行工具，用于在非交互式环境中（例如CI中）提供ssh的密码。</p>\n<p>该命令的语法如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: sshpass [-f|-d|-p|-e] [-hV] command parameters</span><br><span class=\"line\">   -f filename   Take password to use from file</span><br><span class=\"line\">   -d number     Use number as file descriptor for getting password</span><br><span class=\"line\">   -p password   Provide password as argument (security unwise)</span><br><span class=\"line\">   -e            Password is passed as env-var &quot;SSHPASS&quot;</span><br><span class=\"line\">   With no parameters - password will be taken from stdin</span><br><span class=\"line\"></span><br><span class=\"line\">   -h            Show help (this screen)</span><br><span class=\"line\">   -V            Print version information</span><br><span class=\"line\">At most one of -f, -d, -p or -e should be used</span><br></pre></td></tr></table></figure>\n\n<p>下面是两种常用提供密码的方式，如果一种都不指定，那么就从标准输入流中读取密码：</p>\n<p>-p，表示密码来自于命令行参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sshpass -p &#39;这里填密码&#39; ssh username@10.42.0.1</span><br></pre></td></tr></table></figure>\n\n<p>-e，表示密码来自于环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export SSHPASS&#x3D;&#39;这里填密码&#39;</span><br><span class=\"line\">$ echo $SSHPASS</span><br><span class=\"line\">$ sshpass -e ssh username@10.42.0.1</span><br></pre></td></tr></table></figure>\n\n<p>另外，sshpass不仅可以用于执行ssh命令，用于执行scp或者rsync命令也是可以的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行rsync命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sshpass -e rsync -r --delete-after --quiet public xxxx@18.163.206.60:~/throwable.cn</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行scp命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sshpass -e scp -r public xxxx@18.163.206.60:~/throwable.cn</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>sshpass是一个命令行工具，用于在非交互式环境中（例如CI中）提供ssh的密码。</p>\n<p>该命令的语法如下：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: sshpass [-f|-d|-p|-e] [-hV] command parameters</span><br><span class=\"line\">   -f filename   Take password to use from file</span><br><span class=\"line\">   -d number     Use number as file descriptor for getting password</span><br><span class=\"line\">   -p password   Provide password as argument (security unwise)</span><br><span class=\"line\">   -e            Password is passed as env-var &quot;SSHPASS&quot;</span><br><span class=\"line\">   With no parameters - password will be taken from stdin</span><br><span class=\"line\"></span><br><span class=\"line\">   -h            Show help (this screen)</span><br><span class=\"line\">   -V            Print version information</span><br><span class=\"line\">At most one of -f, -d, -p or -e should be used</span><br></pre></td></tr></table></figure>\n\n<p>下面是两种常用提供密码的方式，如果一种都不指定，那么就从标准输入流中读取密码：</p>\n<p>-p，表示密码来自于命令行参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sshpass -p &#39;这里填密码&#39; ssh username@10.42.0.1</span><br></pre></td></tr></table></figure>\n\n<p>-e，表示密码来自于环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export SSHPASS&#x3D;&#39;这里填密码&#39;</span><br><span class=\"line\">$ echo $SSHPASS</span><br><span class=\"line\">$ sshpass -e ssh username@10.42.0.1</span><br></pre></td></tr></table></figure>\n\n<p>另外，sshpass不仅可以用于执行ssh命令，用于执行scp或者rsync命令也是可以的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行rsync命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sshpass -e rsync -r --delete-after --quiet public xxxx@18.163.206.60:~/throwable.cn</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行scp命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sshpass -e scp -r public xxxx@18.163.206.60:~/throwable.cn</span></span><br></pre></td></tr></table></figure>"},{"title":"让React项目的import支持绝对路径","date":"2020-04-23T08:38:41.000Z","_content":"\n默认情况下，由React脚手架创建的应用，使用相对路径来引入组件(假设该组件位于`src/components/SubmittingToolbar`目录)或依赖：\n\n```text\nimport SubmittingToolbar from '../../../../components/SubmittingToolbar';\n```\n\n如果组件的路径很深，就会出现上面演示的这种情况：在路径前面有一串`../../../../`。这看起来有点丑陋，而且也不容易看出`SubmittingToolbar`组件所在的位置。\n\n此时，使用绝对路径来导入组件就很有必要了：\n\n```text\nimport SubmittingToolbar from 'components/SubmittingToolbar';\n```\n\n为了实现该功能，只需要在根目录创建一个`jsconfig.json`文件：\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\"\n  },\n  \"include\": [\"src\"]\n}\n```\n\n如果项目中配置了eslint，为了避免eslint误报，还要进行额外的配置，在eslint的配置文件的`settings`小节中加入：\n\n```json\n{\n  \"settings\": {\n    \"import/resolver\": {\n      \"node\": {\n        \"paths\": [\"src\"]\n      }\n    }\n  }\n}\n```\n","source":"_posts/让React项目的import支持绝对路径.md","raw":"---\ntitle: 让React项目的import支持绝对路径\ndate: 2020-04-23 16:38:41\ntags:\n- React\ncategories:\n- 前端\n---\n\n默认情况下，由React脚手架创建的应用，使用相对路径来引入组件(假设该组件位于`src/components/SubmittingToolbar`目录)或依赖：\n\n```text\nimport SubmittingToolbar from '../../../../components/SubmittingToolbar';\n```\n\n如果组件的路径很深，就会出现上面演示的这种情况：在路径前面有一串`../../../../`。这看起来有点丑陋，而且也不容易看出`SubmittingToolbar`组件所在的位置。\n\n此时，使用绝对路径来导入组件就很有必要了：\n\n```text\nimport SubmittingToolbar from 'components/SubmittingToolbar';\n```\n\n为了实现该功能，只需要在根目录创建一个`jsconfig.json`文件：\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\"\n  },\n  \"include\": [\"src\"]\n}\n```\n\n如果项目中配置了eslint，为了避免eslint误报，还要进行额外的配置，在eslint的配置文件的`settings`小节中加入：\n\n```json\n{\n  \"settings\": {\n    \"import/resolver\": {\n      \"node\": {\n        \"paths\": [\"src\"]\n      }\n    }\n  }\n}\n```\n","slug":"让React项目的import支持绝对路径","published":1,"updated":"2020-11-10T06:10:58.746Z","_id":"ckhbklyl30000f42d3ly02sl5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>默认情况下，由React脚手架创建的应用，使用相对路径来引入组件(假设该组件位于<code>src/components/SubmittingToolbar</code>目录)或依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import SubmittingToolbar from &#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;components&#x2F;SubmittingToolbar&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>如果组件的路径很深，就会出现上面演示的这种情况：在路径前面有一串<code>../../../../</code>。这看起来有点丑陋，而且也不容易看出<code>SubmittingToolbar</code>组件所在的位置。</p>\n<p>此时，使用绝对路径来导入组件就很有必要了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import SubmittingToolbar from &#39;components&#x2F;SubmittingToolbar&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>为了实现该功能，只需要在根目录创建一个<code>jsconfig.json</code>文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\"src\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"include\"</span>: [<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果项目中配置了eslint，为了避免eslint误报，还要进行额外的配置，在eslint的配置文件的<code>settings</code>小节中加入：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"settings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"import/resolver\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"node\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"paths\"</span>: [<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>默认情况下，由React脚手架创建的应用，使用相对路径来引入组件(假设该组件位于<code>src/components/SubmittingToolbar</code>目录)或依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import SubmittingToolbar from &#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;components&#x2F;SubmittingToolbar&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>如果组件的路径很深，就会出现上面演示的这种情况：在路径前面有一串<code>../../../../</code>。这看起来有点丑陋，而且也不容易看出<code>SubmittingToolbar</code>组件所在的位置。</p>\n<p>此时，使用绝对路径来导入组件就很有必要了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import SubmittingToolbar from &#39;components&#x2F;SubmittingToolbar&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>为了实现该功能，只需要在根目录创建一个<code>jsconfig.json</code>文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\"src\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"include\"</span>: [<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果项目中配置了eslint，为了避免eslint误报，还要进行额外的配置，在eslint的配置文件的<code>settings</code>小节中加入：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"settings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"import/resolver\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"node\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"paths\"</span>: [<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"开启Mybatis的日志","date":"2020-06-04T06:36:58.000Z","_content":"\n\n在日常开发中，有时候我们需要查阅Mybatis的日志，但是默认情况下Mybatis的日志是关闭的，下面我来介绍一下如何打开它。\n\n首先我们需要为Mybatis指定一个日志实现类，这里有两个方法可以做到，下面我来分别介绍一下。\n\n第一个方法是通过配置文件指定：\n\n<!--more-->\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <setting name=\"logImpl\" value=\"LOG4J2\"/>\n    </settings>\n</configuration>\n```\n\n如上所示，只要在`<settings>`中配置`logImpl`属性就可以指定Mybatis的日志实现类，可以使用的值如下：\n\n+ SLF4J，使用Slf4j输出日志\n+ LOG4J，使用Log4j输出日志\n+ LOG4J2，使用Log4j2输出日志（即log4j的2.x版本）\n+ JDK_LOGGING，使用JDK的日志库输出日志\n+ COMMONS_LOGGING，使用`apache-commons-logging`输出日志\n+ STDOUT_LOGGING，直接打印日志到标准输出流\n+ NO_LOGGING，无日志\n\n**注意：如果不手动指定日志实现类，Mybatis会自动按下面的顺序查找日志实现类，如果没找到则会关闭日志功能。**\n\n+ SLF4J\n+ Apache Commons Logging\n+ Log4j 2\n+ Log4j\n+ JDK logging\n\n第二个方法是在直接在代码中代码中调用下列函数之一来指定Mybatis所使用的日志实现：\n\n```java\norg.apache.ibatis.logging.LogFactory.useSlf4jLogging();\norg.apache.ibatis.logging.LogFactory.useLog4JLogging();\norg.apache.ibatis.logging.LogFactory.useJdkLogging();\norg.apache.ibatis.logging.LogFactory.useCommonsLogging();\norg.apache.ibatis.logging.LogFactory.useStdOutLogging();\n```\n\n我选择的是使用第一种方式来开启Mybatis的日志：\n\n```xml\n<settings>\n    <setting name=\"logImpl\" value=\"LOG4J2\"/>\n</settings>\n```\n\n在上面我配置的是`LOG4J2`，它需要使用`log4j`的2.x版本来输出日志，因此我们必须在项目（我使用的构建工具是Gradle）中引入2.x版本的`log4j`:\n\n```text\nimplementation 'org.apache.logging.log4j:log4j-api:2.13.3'\nimplementation 'org.apache.logging.log4j:log4j-core:2.13.3'\n```\n\n如果我们没有引入对应的日志库依赖，那么Mybatis会抛出`NoClassDefFoundError`异常：\n\n```java\nCaused by: org.apache.ibatis.logging.LogException: Error setting Log implementation.  Cause: java.lang.reflect.InvocationTargetException\n\tat org.apache.ibatis.logging.LogFactory.setImplementation(LogFactory.java:109)\n\tat org.apache.ibatis.logging.LogFactory.useCustomLogging(LogFactory.java:59)\n\tat org.apache.ibatis.session.Configuration.setLogImpl(Configuration.java:230)\n\tat org.apache.ibatis.builder.xml.XMLConfigBuilder.loadCustomLogImpl(XMLConfigBuilder.java:156)\n\tat org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XMLConfigBuilder.java:108)\n\t... 52 more\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.apache.ibatis.logging.LogFactory.setImplementation(LogFactory.java:103)\n\t... 56 more\nCaused by: java.lang.NoClassDefFoundError: org/apache/logging/log4j/LogManager\n\tat org.apache.ibatis.logging.log4j2.Log4j2Impl.<init>(Log4j2Impl.java:31)\n\t... 61 more\n```\n\n在配置完Mybatis使用的日志实现类后，我们还需要指定日志的级别与输出方式。因为我上面配置了使用`log4j`的2.x版本输出日志，所有我可以在`log4j2.xml`文件中配置日志级别为`debug`然后输出到标准输出流：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration>\n    <Appenders>\n        <Console name=\"STDOUT\">\n            <PatternLayout pattern=\"%m%n\"/>\n        </Console>\n    </Appenders>\n\n    <Loggers>\n        <Root level=\"DEBUG\">\n            <AppenderRef ref=\"STDOUT\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n如果配置成功，在Mybatis执行SQL查询时我们就可以看到它的日志了：\n\n```text\nOpening JDBC Connection\nChecked out connection 1991691115 from pool.\nSetting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]\n==>  Preparing: SELECT * FROM employees WHERE emp_no=? \n==> Parameters: 10001(Integer)\n====>  Preparing: SELECT * FROM salaries WHERE emp_no=? \n====> Parameters: 10001(Integer)\n<====      Total: 17\n<==      Total: 1\nResetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]\nClosing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]\nReturned connection 1991691115 to pool.\n```\n","source":"_posts/开启Mybatis的日志.md","raw":"---\ntitle: 开启Mybatis的日志\ntags: Mybatis\ncategory: Java\ndate: 2020-06-04 14:36:58\n---\n\n\n在日常开发中，有时候我们需要查阅Mybatis的日志，但是默认情况下Mybatis的日志是关闭的，下面我来介绍一下如何打开它。\n\n首先我们需要为Mybatis指定一个日志实现类，这里有两个方法可以做到，下面我来分别介绍一下。\n\n第一个方法是通过配置文件指定：\n\n<!--more-->\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <setting name=\"logImpl\" value=\"LOG4J2\"/>\n    </settings>\n</configuration>\n```\n\n如上所示，只要在`<settings>`中配置`logImpl`属性就可以指定Mybatis的日志实现类，可以使用的值如下：\n\n+ SLF4J，使用Slf4j输出日志\n+ LOG4J，使用Log4j输出日志\n+ LOG4J2，使用Log4j2输出日志（即log4j的2.x版本）\n+ JDK_LOGGING，使用JDK的日志库输出日志\n+ COMMONS_LOGGING，使用`apache-commons-logging`输出日志\n+ STDOUT_LOGGING，直接打印日志到标准输出流\n+ NO_LOGGING，无日志\n\n**注意：如果不手动指定日志实现类，Mybatis会自动按下面的顺序查找日志实现类，如果没找到则会关闭日志功能。**\n\n+ SLF4J\n+ Apache Commons Logging\n+ Log4j 2\n+ Log4j\n+ JDK logging\n\n第二个方法是在直接在代码中代码中调用下列函数之一来指定Mybatis所使用的日志实现：\n\n```java\norg.apache.ibatis.logging.LogFactory.useSlf4jLogging();\norg.apache.ibatis.logging.LogFactory.useLog4JLogging();\norg.apache.ibatis.logging.LogFactory.useJdkLogging();\norg.apache.ibatis.logging.LogFactory.useCommonsLogging();\norg.apache.ibatis.logging.LogFactory.useStdOutLogging();\n```\n\n我选择的是使用第一种方式来开启Mybatis的日志：\n\n```xml\n<settings>\n    <setting name=\"logImpl\" value=\"LOG4J2\"/>\n</settings>\n```\n\n在上面我配置的是`LOG4J2`，它需要使用`log4j`的2.x版本来输出日志，因此我们必须在项目（我使用的构建工具是Gradle）中引入2.x版本的`log4j`:\n\n```text\nimplementation 'org.apache.logging.log4j:log4j-api:2.13.3'\nimplementation 'org.apache.logging.log4j:log4j-core:2.13.3'\n```\n\n如果我们没有引入对应的日志库依赖，那么Mybatis会抛出`NoClassDefFoundError`异常：\n\n```java\nCaused by: org.apache.ibatis.logging.LogException: Error setting Log implementation.  Cause: java.lang.reflect.InvocationTargetException\n\tat org.apache.ibatis.logging.LogFactory.setImplementation(LogFactory.java:109)\n\tat org.apache.ibatis.logging.LogFactory.useCustomLogging(LogFactory.java:59)\n\tat org.apache.ibatis.session.Configuration.setLogImpl(Configuration.java:230)\n\tat org.apache.ibatis.builder.xml.XMLConfigBuilder.loadCustomLogImpl(XMLConfigBuilder.java:156)\n\tat org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XMLConfigBuilder.java:108)\n\t... 52 more\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.apache.ibatis.logging.LogFactory.setImplementation(LogFactory.java:103)\n\t... 56 more\nCaused by: java.lang.NoClassDefFoundError: org/apache/logging/log4j/LogManager\n\tat org.apache.ibatis.logging.log4j2.Log4j2Impl.<init>(Log4j2Impl.java:31)\n\t... 61 more\n```\n\n在配置完Mybatis使用的日志实现类后，我们还需要指定日志的级别与输出方式。因为我上面配置了使用`log4j`的2.x版本输出日志，所有我可以在`log4j2.xml`文件中配置日志级别为`debug`然后输出到标准输出流：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration>\n    <Appenders>\n        <Console name=\"STDOUT\">\n            <PatternLayout pattern=\"%m%n\"/>\n        </Console>\n    </Appenders>\n\n    <Loggers>\n        <Root level=\"DEBUG\">\n            <AppenderRef ref=\"STDOUT\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n如果配置成功，在Mybatis执行SQL查询时我们就可以看到它的日志了：\n\n```text\nOpening JDBC Connection\nChecked out connection 1991691115 from pool.\nSetting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]\n==>  Preparing: SELECT * FROM employees WHERE emp_no=? \n==> Parameters: 10001(Integer)\n====>  Preparing: SELECT * FROM salaries WHERE emp_no=? \n====> Parameters: 10001(Integer)\n<====      Total: 17\n<==      Total: 1\nResetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]\nClosing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]\nReturned connection 1991691115 to pool.\n```\n","slug":"开启Mybatis的日志","published":1,"updated":"2020-11-10T06:11:30.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhbku9r20000802d58g5g8fg","content":"<p>在日常开发中，有时候我们需要查阅Mybatis的日志，但是默认情况下Mybatis的日志是关闭的，下面我来介绍一下如何打开它。</p>\n<p>首先我们需要为Mybatis指定一个日志实现类，这里有两个方法可以做到，下面我来分别介绍一下。</p>\n<p>第一个方法是通过配置文件指定：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"LOG4J2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上所示，只要在<code>&lt;settings&gt;</code>中配置<code>logImpl</code>属性就可以指定Mybatis的日志实现类，可以使用的值如下：</p>\n<ul>\n<li>SLF4J，使用Slf4j输出日志</li>\n<li>LOG4J，使用Log4j输出日志</li>\n<li>LOG4J2，使用Log4j2输出日志（即log4j的2.x版本）</li>\n<li>JDK_LOGGING，使用JDK的日志库输出日志</li>\n<li>COMMONS_LOGGING，使用<code>apache-commons-logging</code>输出日志</li>\n<li>STDOUT_LOGGING，直接打印日志到标准输出流</li>\n<li>NO_LOGGING，无日志</li>\n</ul>\n<p><strong>注意：如果不手动指定日志实现类，Mybatis会自动按下面的顺序查找日志实现类，如果没找到则会关闭日志功能。</strong></p>\n<ul>\n<li>SLF4J</li>\n<li>Apache Commons Logging</li>\n<li>Log4j 2</li>\n<li>Log4j</li>\n<li>JDK logging</li>\n</ul>\n<p>第二个方法是在直接在代码中代码中调用下列函数之一来指定Mybatis所使用的日志实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.ibatis.logging.LogFactory.useSlf4jLogging();</span><br><span class=\"line\">org.apache.ibatis.logging.LogFactory.useLog4JLogging();</span><br><span class=\"line\">org.apache.ibatis.logging.LogFactory.useJdkLogging();</span><br><span class=\"line\">org.apache.ibatis.logging.LogFactory.useCommonsLogging();</span><br><span class=\"line\">org.apache.ibatis.logging.LogFactory.useStdOutLogging();</span><br></pre></td></tr></table></figure>\n\n<p>我选择的是使用第一种方式来开启Mybatis的日志：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"LOG4J2\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面我配置的是<code>LOG4J2</code>，它需要使用<code>log4j</code>的2.x版本来输出日志，因此我们必须在项目（我使用的构建工具是Gradle）中引入2.x版本的<code>log4j</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &#39;org.apache.logging.log4j:log4j-api:2.13.3&#39;</span><br><span class=\"line\">implementation &#39;org.apache.logging.log4j:log4j-core:2.13.3&#39;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们没有引入对应的日志库依赖，那么Mybatis会抛出<code>NoClassDefFoundError</code>异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: org.apache.ibatis.logging.LogException: Error setting Log implementation.  Cause: java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">\tat org.apache.ibatis.logging.LogFactory.setImplementation(LogFactory.java:<span class=\"number\">109</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.logging.LogFactory.useCustomLogging(LogFactory.java:<span class=\"number\">59</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.session.Configuration.setLogImpl(Configuration.java:<span class=\"number\">230</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.builder.xml.XMLConfigBuilder.loadCustomLogImpl(XMLConfigBuilder.java:<span class=\"number\">156</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XMLConfigBuilder.java:<span class=\"number\">108</span>)</span><br><span class=\"line\">\t... <span class=\"number\">52</span> more</span><br><span class=\"line\">Caused by: java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class=\"number\">45</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Constructor.newInstance(Constructor.java:<span class=\"number\">423</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.logging.LogFactory.setImplementation(LogFactory.java:<span class=\"number\">103</span>)</span><br><span class=\"line\">\t... <span class=\"number\">56</span> more</span><br><span class=\"line\">Caused by: java.lang.NoClassDefFoundError: org/apache/logging/log4j/LogManager</span><br><span class=\"line\">\tat org.apache.ibatis.logging.log4j2.Log4j2Impl.&lt;init&gt;(Log4j2Impl.java:<span class=\"number\">31</span>)</span><br><span class=\"line\">\t... <span class=\"number\">61</span> more</span><br></pre></td></tr></table></figure>\n\n<p>在配置完Mybatis使用的日志实现类后，我们还需要指定日志的级别与输出方式。因为我上面配置了使用<code>log4j</code>的2.x版本输出日志，所有我可以在<code>log4j2.xml</code>文件中配置日志级别为<code>debug</code>然后输出到标准输出流：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Console</span> <span class=\"attr\">name</span>=<span class=\"string\">\"STDOUT\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Console</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Root</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果配置成功，在Mybatis执行SQL查询时我们就可以看到它的日志了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Opening JDBC Connection</span><br><span class=\"line\">Checked out connection 1991691115 from pool.</span><br><span class=\"line\">Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]</span><br><span class=\"line\">&#x3D;&#x3D;&gt;  Preparing: SELECT * FROM employees WHERE emp_no&#x3D;? </span><br><span class=\"line\">&#x3D;&#x3D;&gt; Parameters: 10001(Integer)</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: SELECT * FROM salaries WHERE emp_no&#x3D;? </span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 10001(Integer)</span><br><span class=\"line\">&lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 17</span><br><span class=\"line\">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class=\"line\">Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]</span><br><span class=\"line\">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]</span><br><span class=\"line\">Returned connection 1991691115 to pool.</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在日常开发中，有时候我们需要查阅Mybatis的日志，但是默认情况下Mybatis的日志是关闭的，下面我来介绍一下如何打开它。</p>\n<p>首先我们需要为Mybatis指定一个日志实现类，这里有两个方法可以做到，下面我来分别介绍一下。</p>\n<p>第一个方法是通过配置文件指定：</p>","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"LOG4J2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上所示，只要在<code>&lt;settings&gt;</code>中配置<code>logImpl</code>属性就可以指定Mybatis的日志实现类，可以使用的值如下：</p>\n<ul>\n<li>SLF4J，使用Slf4j输出日志</li>\n<li>LOG4J，使用Log4j输出日志</li>\n<li>LOG4J2，使用Log4j2输出日志（即log4j的2.x版本）</li>\n<li>JDK_LOGGING，使用JDK的日志库输出日志</li>\n<li>COMMONS_LOGGING，使用<code>apache-commons-logging</code>输出日志</li>\n<li>STDOUT_LOGGING，直接打印日志到标准输出流</li>\n<li>NO_LOGGING，无日志</li>\n</ul>\n<p><strong>注意：如果不手动指定日志实现类，Mybatis会自动按下面的顺序查找日志实现类，如果没找到则会关闭日志功能。</strong></p>\n<ul>\n<li>SLF4J</li>\n<li>Apache Commons Logging</li>\n<li>Log4j 2</li>\n<li>Log4j</li>\n<li>JDK logging</li>\n</ul>\n<p>第二个方法是在直接在代码中代码中调用下列函数之一来指定Mybatis所使用的日志实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.ibatis.logging.LogFactory.useSlf4jLogging();</span><br><span class=\"line\">org.apache.ibatis.logging.LogFactory.useLog4JLogging();</span><br><span class=\"line\">org.apache.ibatis.logging.LogFactory.useJdkLogging();</span><br><span class=\"line\">org.apache.ibatis.logging.LogFactory.useCommonsLogging();</span><br><span class=\"line\">org.apache.ibatis.logging.LogFactory.useStdOutLogging();</span><br></pre></td></tr></table></figure>\n\n<p>我选择的是使用第一种方式来开启Mybatis的日志：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"LOG4J2\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面我配置的是<code>LOG4J2</code>，它需要使用<code>log4j</code>的2.x版本来输出日志，因此我们必须在项目（我使用的构建工具是Gradle）中引入2.x版本的<code>log4j</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &#39;org.apache.logging.log4j:log4j-api:2.13.3&#39;</span><br><span class=\"line\">implementation &#39;org.apache.logging.log4j:log4j-core:2.13.3&#39;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们没有引入对应的日志库依赖，那么Mybatis会抛出<code>NoClassDefFoundError</code>异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: org.apache.ibatis.logging.LogException: Error setting Log implementation.  Cause: java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">\tat org.apache.ibatis.logging.LogFactory.setImplementation(LogFactory.java:<span class=\"number\">109</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.logging.LogFactory.useCustomLogging(LogFactory.java:<span class=\"number\">59</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.session.Configuration.setLogImpl(Configuration.java:<span class=\"number\">230</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.builder.xml.XMLConfigBuilder.loadCustomLogImpl(XMLConfigBuilder.java:<span class=\"number\">156</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XMLConfigBuilder.java:<span class=\"number\">108</span>)</span><br><span class=\"line\">\t... <span class=\"number\">52</span> more</span><br><span class=\"line\">Caused by: java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class=\"number\">45</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Constructor.newInstance(Constructor.java:<span class=\"number\">423</span>)</span><br><span class=\"line\">\tat org.apache.ibatis.logging.LogFactory.setImplementation(LogFactory.java:<span class=\"number\">103</span>)</span><br><span class=\"line\">\t... <span class=\"number\">56</span> more</span><br><span class=\"line\">Caused by: java.lang.NoClassDefFoundError: org/apache/logging/log4j/LogManager</span><br><span class=\"line\">\tat org.apache.ibatis.logging.log4j2.Log4j2Impl.&lt;init&gt;(Log4j2Impl.java:<span class=\"number\">31</span>)</span><br><span class=\"line\">\t... <span class=\"number\">61</span> more</span><br></pre></td></tr></table></figure>\n\n<p>在配置完Mybatis使用的日志实现类后，我们还需要指定日志的级别与输出方式。因为我上面配置了使用<code>log4j</code>的2.x版本输出日志，所有我可以在<code>log4j2.xml</code>文件中配置日志级别为<code>debug</code>然后输出到标准输出流：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Console</span> <span class=\"attr\">name</span>=<span class=\"string\">\"STDOUT\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%m%n\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Console</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Root</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果配置成功，在Mybatis执行SQL查询时我们就可以看到它的日志了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Opening JDBC Connection</span><br><span class=\"line\">Checked out connection 1991691115 from pool.</span><br><span class=\"line\">Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]</span><br><span class=\"line\">&#x3D;&#x3D;&gt;  Preparing: SELECT * FROM employees WHERE emp_no&#x3D;? </span><br><span class=\"line\">&#x3D;&#x3D;&gt; Parameters: 10001(Integer)</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: SELECT * FROM salaries WHERE emp_no&#x3D;? </span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 10001(Integer)</span><br><span class=\"line\">&lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 17</span><br><span class=\"line\">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class=\"line\">Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]</span><br><span class=\"line\">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@76b6cb6b]</span><br><span class=\"line\">Returned connection 1991691115 to pool.</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7edxo3v0000iv2d4vmm25iy","category_id":"ck7edxo420001iv2dcf3y9yft","_id":"ck7edxo440004iv2dftpj06ss"},{"post_id":"ck8xxnjg80001482d1ujq576k","category_id":"ck8xxnjge0005482d6ato3bwd","_id":"ck8xxnjgh000c482d9a8989vx"},{"post_id":"ck8xxnjgd0004482ddbg3e4qi","category_id":"ck8xxnjgg0009482d2ov7b80n","_id":"ck8xxnjgi000e482d8d1b4wqu"},{"post_id":"ck8xxojez000f482de9qod9sl","category_id":"ck8xxojf0000g482da5w76krl","_id":"ck8xxojf1000j482dhnvb9ovq"},{"post_id":"ckf7lznol0005ga2d2p8x6njm","category_id":"ck7edxo420001iv2dcf3y9yft","_id":"ckf7lznom000aga2dbcqecuwa"},{"post_id":"ckf7lznq1000jga2dh3jp3ejj","category_id":"ckf7lznoi0002ga2deuzxbuvx","_id":"ckf7lznq6000nga2dd21b6f0g"},{"post_id":"ckhbk1tyk00001u2d6nz2b82s","category_id":"ck7edxo420001iv2dcf3y9yft","_id":"ckhbk1tyu00021u2dfay9fhem"},{"post_id":"ckhbk2hft00031u2d6ej4fbo5","category_id":"ck8xxnjgb0002482d0ww53gf0","_id":"ckhbk2hfu00051u2dauw7bw2o"},{"post_id":"ckhbklyl30000f42d3ly02sl5","category_id":"ckf7lznoi0002ga2deuzxbuvx","_id":"ckhbklyl40002f42dbbhcd419"},{"post_id":"ckhbku9r20000802d58g5g8fg","category_id":"ck7edxo420001iv2dcf3y9yft","_id":"ckhbku9ra0002802d6by32o9x"}],"PostTag":[{"post_id":"ck7edxo3v0000iv2d4vmm25iy","tag_id":"ck7edxo430002iv2d1qch2kb1","_id":"ck7edxo440003iv2dfdh32lcr"},{"post_id":"ck8xxnjg80001482d1ujq576k","tag_id":"ck8xxnjge0006482db3n0fir4","_id":"ck8xxnjgg000b482de4bxdrr7"},{"post_id":"ck8xxnjgd0004482ddbg3e4qi","tag_id":"ck8xxnjgg000a482d3rggdiob","_id":"ck8xxnjgh000d482d9uj9dn1e"},{"post_id":"ck8xxojez000f482de9qod9sl","tag_id":"ck8xxojf1000h482dcfl56wyj","_id":"ck8xxojf1000i482d9bf728pz"},{"post_id":"ckf7lznol0005ga2d2p8x6njm","tag_id":"ckf7lznon000ega2d4qf3al83","_id":"ckf7lznoo000hga2dc68y88g0"},{"post_id":"ckf7lznol0005ga2d2p8x6njm","tag_id":"ckf7lznoo000gga2d0qprcgn4","_id":"ckf7lznoo000iga2dbc7a1mw9"},{"post_id":"ckf7lznq1000jga2dh3jp3ejj","tag_id":"ckf7lznq4000lga2ddan7f8ev","_id":"ckf7lznq8000qga2dc6upeiur"},{"post_id":"ckhbk1tyk00001u2d6nz2b82s","tag_id":"ckf7lznom0007ga2d9tpn4mir","_id":"ckhbk1tyr00011u2da71i6zen"},{"post_id":"ckhbk2hft00031u2d6ej4fbo5","tag_id":"ck8xxnjgc0003482d5fzn171g","_id":"ckhbk2hfu00041u2d5fku444i"},{"post_id":"ckhbklyl30000f42d3ly02sl5","tag_id":"ckf7lznok0003ga2dbg2y3fza","_id":"ckhbklyl40001f42d3zwed370"},{"post_id":"ckhbku9r20000802d58g5g8fg","tag_id":"ckf7lznom000bga2dbt60a6av","_id":"ckhbku9ra0001802ddlvnamcn"}],"Tag":[{"name":"java-agent","_id":"ck7edxo430002iv2d1qch2kb1"},{"name":"sshpass","_id":"ck8xxnjgc0003482d5fzn171g"},{"name":"git","_id":"ck8xxnjge0006482db3n0fir4"},{"name":"travis-ci","_id":"ck8xxnjgg000a482d3rggdiob"},{"name":"锁","_id":"ck8xxojf1000h482dcfl56wyj"},{"name":"React","_id":"ckf7lznok0003ga2dbg2y3fza"},{"name":"多线程","_id":"ckf7lznom0007ga2d9tpn4mir"},{"name":"Mybatis","_id":"ckf7lznom000bga2dbt60a6av"},{"name":"jackson","_id":"ckf7lznon000ega2d4qf3al83"},{"name":"枚举","_id":"ckf7lznoo000gga2d0qprcgn4"},{"name":"axios","_id":"ckf7lznq4000lga2ddan7f8ev"},{"name":"linux, sed","_id":"ckf7lznq8000pga2dc6zo1qmb"}]}}